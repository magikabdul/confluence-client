/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * ContentChildTypeExpandable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentChildTypeExpandable {
  public static final String SERIALIZED_NAME_ALL = "all";
  @SerializedName(SERIALIZED_NAME_ALL)
  private String all;

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private String attachment;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private String page;

  public static final String SERIALIZED_NAME_WHITEBOARD = "whiteboard";
  @SerializedName(SERIALIZED_NAME_WHITEBOARD)
  private String whiteboard;

  public ContentChildTypeExpandable() {
  }

  public ContentChildTypeExpandable all(String all) {
    this.all = all;
    return this;
  }

   /**
   * Get all
   * @return all
  **/
  @javax.annotation.Nullable
  public String getAll() {
    return all;
  }

  public void setAll(String all) {
    this.all = all;
  }


  public ContentChildTypeExpandable attachment(String attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Get attachment
   * @return attachment
  **/
  @javax.annotation.Nullable
  public String getAttachment() {
    return attachment;
  }

  public void setAttachment(String attachment) {
    this.attachment = attachment;
  }


  public ContentChildTypeExpandable comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ContentChildTypeExpandable page(String page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  public String getPage() {
    return page;
  }

  public void setPage(String page) {
    this.page = page;
  }


  public ContentChildTypeExpandable whiteboard(String whiteboard) {
    this.whiteboard = whiteboard;
    return this;
  }

   /**
   * Get whiteboard
   * @return whiteboard
  **/
  @javax.annotation.Nullable
  public String getWhiteboard() {
    return whiteboard;
  }

  public void setWhiteboard(String whiteboard) {
    this.whiteboard = whiteboard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentChildTypeExpandable contentChildTypeExpandable = (ContentChildTypeExpandable) o;
    return Objects.equals(this.all, contentChildTypeExpandable.all) &&
        Objects.equals(this.attachment, contentChildTypeExpandable.attachment) &&
        Objects.equals(this.comment, contentChildTypeExpandable.comment) &&
        Objects.equals(this.page, contentChildTypeExpandable.page) &&
        Objects.equals(this.whiteboard, contentChildTypeExpandable.whiteboard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, attachment, comment, page, whiteboard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentChildTypeExpandable {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    whiteboard: ").append(toIndentedString(whiteboard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all");
    openapiFields.add("attachment");
    openapiFields.add("comment");
    openapiFields.add("page");
    openapiFields.add("whiteboard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentChildTypeExpandable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentChildTypeExpandable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentChildTypeExpandable is not found in the empty JSON string", ContentChildTypeExpandable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentChildTypeExpandable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentChildTypeExpandable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("all") != null && !jsonObj.get("all").isJsonNull()) && !jsonObj.get("all").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `all` to be a primitive type in the JSON string but got `%s`", jsonObj.get("all").toString()));
      }
      if ((jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) && !jsonObj.get("attachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachment").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) && !jsonObj.get("page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page").toString()));
      }
      if ((jsonObj.get("whiteboard") != null && !jsonObj.get("whiteboard").isJsonNull()) && !jsonObj.get("whiteboard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `whiteboard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("whiteboard").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentChildTypeExpandable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentChildTypeExpandable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentChildTypeExpandable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentChildTypeExpandable.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentChildTypeExpandable>() {
           @Override
           public void write(JsonWriter out, ContentChildTypeExpandable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentChildTypeExpandable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentChildTypeExpandable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentChildTypeExpandable
  * @throws IOException if the JSON string is invalid with respect to ContentChildTypeExpandable
  */
  public static ContentChildTypeExpandable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentChildTypeExpandable.class);
  }

 /**
  * Convert an instance of ContentChildTypeExpandable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

