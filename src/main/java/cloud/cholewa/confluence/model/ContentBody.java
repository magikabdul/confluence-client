/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import cloud.cholewa.confluence.model.ContentBodyExpandable;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * ContentBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentBody {
  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private ContentBody view;

  public static final String SERIALIZED_NAME_EXPORT_VIEW = "export_view";
  @SerializedName(SERIALIZED_NAME_EXPORT_VIEW)
  private ContentBody exportView;

  public static final String SERIALIZED_NAME_STYLED_VIEW = "styled_view";
  @SerializedName(SERIALIZED_NAME_STYLED_VIEW)
  private ContentBody styledView;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private ContentBody storage;

  public static final String SERIALIZED_NAME_WIKI = "wiki";
  @SerializedName(SERIALIZED_NAME_WIKI)
  private ContentBody wiki;

  public static final String SERIALIZED_NAME_EDITOR = "editor";
  @SerializedName(SERIALIZED_NAME_EDITOR)
  private ContentBody editor;

  public static final String SERIALIZED_NAME_EDITOR2 = "editor2";
  @SerializedName(SERIALIZED_NAME_EDITOR2)
  private ContentBody editor2;

  public static final String SERIALIZED_NAME_ANONYMOUS_EXPORT_VIEW = "anonymous_export_view";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_EXPORT_VIEW)
  private ContentBody anonymousExportView;

  public static final String SERIALIZED_NAME_ATLAS_DOC_FORMAT = "atlas_doc_format";
  @SerializedName(SERIALIZED_NAME_ATLAS_DOC_FORMAT)
  private ContentBody atlasDocFormat;

  public static final String SERIALIZED_NAME_DYNAMIC = "dynamic";
  @SerializedName(SERIALIZED_NAME_DYNAMIC)
  private ContentBody dynamic;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private ContentBody raw;

  public static final String SERIALIZED_NAME_EXPANDABLE = "_expandable";
  @SerializedName(SERIALIZED_NAME_EXPANDABLE)
  private ContentBodyExpandable expandable;

  public ContentBody() {
  }

  public ContentBody view(ContentBody view) {
    this.view = view;
    return this;
  }

   /**
   * Get view
   * @return view
  **/
  @javax.annotation.Nullable
  public ContentBody getView() {
    return view;
  }

  public void setView(ContentBody view) {
    this.view = view;
  }


  public ContentBody exportView(ContentBody exportView) {
    this.exportView = exportView;
    return this;
  }

   /**
   * Get exportView
   * @return exportView
  **/
  @javax.annotation.Nullable
  public ContentBody getExportView() {
    return exportView;
  }

  public void setExportView(ContentBody exportView) {
    this.exportView = exportView;
  }


  public ContentBody styledView(ContentBody styledView) {
    this.styledView = styledView;
    return this;
  }

   /**
   * Get styledView
   * @return styledView
  **/
  @javax.annotation.Nullable
  public ContentBody getStyledView() {
    return styledView;
  }

  public void setStyledView(ContentBody styledView) {
    this.styledView = styledView;
  }


  public ContentBody storage(ContentBody storage) {
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @javax.annotation.Nullable
  public ContentBody getStorage() {
    return storage;
  }

  public void setStorage(ContentBody storage) {
    this.storage = storage;
  }


  public ContentBody wiki(ContentBody wiki) {
    this.wiki = wiki;
    return this;
  }

   /**
   * Get wiki
   * @return wiki
  **/
  @javax.annotation.Nullable
  public ContentBody getWiki() {
    return wiki;
  }

  public void setWiki(ContentBody wiki) {
    this.wiki = wiki;
  }


  public ContentBody editor(ContentBody editor) {
    this.editor = editor;
    return this;
  }

   /**
   * Get editor
   * @return editor
  **/
  @javax.annotation.Nullable
  public ContentBody getEditor() {
    return editor;
  }

  public void setEditor(ContentBody editor) {
    this.editor = editor;
  }


  public ContentBody editor2(ContentBody editor2) {
    this.editor2 = editor2;
    return this;
  }

   /**
   * Get editor2
   * @return editor2
  **/
  @javax.annotation.Nullable
  public ContentBody getEditor2() {
    return editor2;
  }

  public void setEditor2(ContentBody editor2) {
    this.editor2 = editor2;
  }


  public ContentBody anonymousExportView(ContentBody anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
    return this;
  }

   /**
   * Get anonymousExportView
   * @return anonymousExportView
  **/
  @javax.annotation.Nullable
  public ContentBody getAnonymousExportView() {
    return anonymousExportView;
  }

  public void setAnonymousExportView(ContentBody anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
  }


  public ContentBody atlasDocFormat(ContentBody atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
    return this;
  }

   /**
   * Get atlasDocFormat
   * @return atlasDocFormat
  **/
  @javax.annotation.Nullable
  public ContentBody getAtlasDocFormat() {
    return atlasDocFormat;
  }

  public void setAtlasDocFormat(ContentBody atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
  }


  public ContentBody dynamic(ContentBody dynamic) {
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Get dynamic
   * @return dynamic
  **/
  @javax.annotation.Nullable
  public ContentBody getDynamic() {
    return dynamic;
  }

  public void setDynamic(ContentBody dynamic) {
    this.dynamic = dynamic;
  }


  public ContentBody raw(ContentBody raw) {
    this.raw = raw;
    return this;
  }

   /**
   * Get raw
   * @return raw
  **/
  @javax.annotation.Nullable
  public ContentBody getRaw() {
    return raw;
  }

  public void setRaw(ContentBody raw) {
    this.raw = raw;
  }


  public ContentBody expandable(ContentBodyExpandable expandable) {
    this.expandable = expandable;
    return this;
  }

   /**
   * Get expandable
   * @return expandable
  **/
  @javax.annotation.Nullable
  public ContentBodyExpandable getExpandable() {
    return expandable;
  }

  public void setExpandable(ContentBodyExpandable expandable) {
    this.expandable = expandable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentBody contentBody = (ContentBody) o;
    return Objects.equals(this.view, contentBody.view) &&
        Objects.equals(this.exportView, contentBody.exportView) &&
        Objects.equals(this.styledView, contentBody.styledView) &&
        Objects.equals(this.storage, contentBody.storage) &&
        Objects.equals(this.wiki, contentBody.wiki) &&
        Objects.equals(this.editor, contentBody.editor) &&
        Objects.equals(this.editor2, contentBody.editor2) &&
        Objects.equals(this.anonymousExportView, contentBody.anonymousExportView) &&
        Objects.equals(this.atlasDocFormat, contentBody.atlasDocFormat) &&
        Objects.equals(this.dynamic, contentBody.dynamic) &&
        Objects.equals(this.raw, contentBody.raw) &&
        Objects.equals(this.expandable, contentBody.expandable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(view, exportView, styledView, storage, wiki, editor, editor2, anonymousExportView, atlasDocFormat, dynamic, raw, expandable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentBody {\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    exportView: ").append(toIndentedString(exportView)).append("\n");
    sb.append("    styledView: ").append(toIndentedString(styledView)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    editor2: ").append(toIndentedString(editor2)).append("\n");
    sb.append("    anonymousExportView: ").append(toIndentedString(anonymousExportView)).append("\n");
    sb.append("    atlasDocFormat: ").append(toIndentedString(atlasDocFormat)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    expandable: ").append(toIndentedString(expandable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("view");
    openapiFields.add("export_view");
    openapiFields.add("styled_view");
    openapiFields.add("storage");
    openapiFields.add("wiki");
    openapiFields.add("editor");
    openapiFields.add("editor2");
    openapiFields.add("anonymous_export_view");
    openapiFields.add("atlas_doc_format");
    openapiFields.add("dynamic");
    openapiFields.add("raw");
    openapiFields.add("_expandable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentBody
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentBody is not found in the empty JSON string", ContentBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `view`
      if (jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("view"));
      }
      // validate the optional field `export_view`
      if (jsonObj.get("export_view") != null && !jsonObj.get("export_view").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("export_view"));
      }
      // validate the optional field `styled_view`
      if (jsonObj.get("styled_view") != null && !jsonObj.get("styled_view").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("styled_view"));
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("storage"));
      }
      // validate the optional field `wiki`
      if (jsonObj.get("wiki") != null && !jsonObj.get("wiki").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("wiki"));
      }
      // validate the optional field `editor`
      if (jsonObj.get("editor") != null && !jsonObj.get("editor").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("editor"));
      }
      // validate the optional field `editor2`
      if (jsonObj.get("editor2") != null && !jsonObj.get("editor2").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("editor2"));
      }
      // validate the optional field `anonymous_export_view`
      if (jsonObj.get("anonymous_export_view") != null && !jsonObj.get("anonymous_export_view").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("anonymous_export_view"));
      }
      // validate the optional field `atlas_doc_format`
      if (jsonObj.get("atlas_doc_format") != null && !jsonObj.get("atlas_doc_format").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("atlas_doc_format"));
      }
      // validate the optional field `dynamic`
      if (jsonObj.get("dynamic") != null && !jsonObj.get("dynamic").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("dynamic"));
      }
      // validate the optional field `raw`
      if (jsonObj.get("raw") != null && !jsonObj.get("raw").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("raw"));
      }
      // validate the optional field `_expandable`
      if (jsonObj.get("_expandable") != null && !jsonObj.get("_expandable").isJsonNull()) {
        ContentBodyExpandable.validateJsonElement(jsonObj.get("_expandable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentBody>() {
           @Override
           public void write(JsonWriter out, ContentBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentBody
  * @throws IOException if the JSON string is invalid with respect to ContentBody
  */
  public static ContentBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentBody.class);
  }

 /**
  * Convert an instance of ContentBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

