/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import cloud.cholewa.confluence.model.BlueprintTemplateExpandable;
import cloud.cholewa.confluence.model.BlueprintTemplateOriginalTemplate;
import cloud.cholewa.confluence.model.ContentTemplateBody;
import cloud.cholewa.confluence.model.GenericLinksValue;
import cloud.cholewa.confluence.model.Label;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * BlueprintTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlueprintTemplate {
  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_ORIGINAL_TEMPLATE = "originalTemplate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TEMPLATE)
  private BlueprintTemplateOriginalTemplate originalTemplate;

  public static final String SERIALIZED_NAME_REFERENCING_BLUEPRINT = "referencingBlueprint";
  @SerializedName(SERIALIZED_NAME_REFERENCING_BLUEPRINT)
  private String referencingBlueprint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  private Map<String, Object> space = new HashMap<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<Label> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "templateType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private String templateType;

  public static final String SERIALIZED_NAME_EDITOR_VERSION = "editorVersion";
  @SerializedName(SERIALIZED_NAME_EDITOR_VERSION)
  private String editorVersion;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private ContentTemplateBody body;

  public static final String SERIALIZED_NAME_EXPANDABLE = "_expandable";
  @SerializedName(SERIALIZED_NAME_EXPANDABLE)
  private BlueprintTemplateExpandable expandable;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, GenericLinksValue> links = new HashMap<>();

  public BlueprintTemplate() {
  }

  public BlueprintTemplate templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nonnull
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public BlueprintTemplate originalTemplate(BlueprintTemplateOriginalTemplate originalTemplate) {
    this.originalTemplate = originalTemplate;
    return this;
  }

   /**
   * Get originalTemplate
   * @return originalTemplate
  **/
  @javax.annotation.Nonnull
  public BlueprintTemplateOriginalTemplate getOriginalTemplate() {
    return originalTemplate;
  }

  public void setOriginalTemplate(BlueprintTemplateOriginalTemplate originalTemplate) {
    this.originalTemplate = originalTemplate;
  }


  public BlueprintTemplate referencingBlueprint(String referencingBlueprint) {
    this.referencingBlueprint = referencingBlueprint;
    return this;
  }

   /**
   * Get referencingBlueprint
   * @return referencingBlueprint
  **/
  @javax.annotation.Nonnull
  public String getReferencingBlueprint() {
    return referencingBlueprint;
  }

  public void setReferencingBlueprint(String referencingBlueprint) {
    this.referencingBlueprint = referencingBlueprint;
  }


  public BlueprintTemplate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BlueprintTemplate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BlueprintTemplate space(Map<String, Object> space) {
    this.space = space;
    return this;
  }

  public BlueprintTemplate putSpaceItem(String key, Object spaceItem) {
    if (this.space == null) {
      this.space = new HashMap<>();
    }
    this.space.put(key, spaceItem);
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getSpace() {
    return space;
  }

  public void setSpace(Map<String, Object> space) {
    this.space = space;
  }


  public BlueprintTemplate labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public BlueprintTemplate addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nonnull
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }


  public BlueprintTemplate templateType(String templateType) {
    this.templateType = templateType;
    return this;
  }

   /**
   * Get templateType
   * @return templateType
  **/
  @javax.annotation.Nonnull
  public String getTemplateType() {
    return templateType;
  }

  public void setTemplateType(String templateType) {
    this.templateType = templateType;
  }


  public BlueprintTemplate editorVersion(String editorVersion) {
    this.editorVersion = editorVersion;
    return this;
  }

   /**
   * Get editorVersion
   * @return editorVersion
  **/
  @javax.annotation.Nullable
  public String getEditorVersion() {
    return editorVersion;
  }

  public void setEditorVersion(String editorVersion) {
    this.editorVersion = editorVersion;
  }


  public BlueprintTemplate body(ContentTemplateBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  public ContentTemplateBody getBody() {
    return body;
  }

  public void setBody(ContentTemplateBody body) {
    this.body = body;
  }


  public BlueprintTemplate expandable(BlueprintTemplateExpandable expandable) {
    this.expandable = expandable;
    return this;
  }

   /**
   * Get expandable
   * @return expandable
  **/
  @javax.annotation.Nullable
  public BlueprintTemplateExpandable getExpandable() {
    return expandable;
  }

  public void setExpandable(BlueprintTemplateExpandable expandable) {
    this.expandable = expandable;
  }


  public BlueprintTemplate links(Map<String, GenericLinksValue> links) {
    this.links = links;
    return this;
  }

  public BlueprintTemplate putLinksItem(String key, GenericLinksValue linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nonnull
  public Map<String, GenericLinksValue> getLinks() {
    return links;
  }

  public void setLinks(Map<String, GenericLinksValue> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintTemplate blueprintTemplate = (BlueprintTemplate) o;
    return Objects.equals(this.templateId, blueprintTemplate.templateId) &&
        Objects.equals(this.originalTemplate, blueprintTemplate.originalTemplate) &&
        Objects.equals(this.referencingBlueprint, blueprintTemplate.referencingBlueprint) &&
        Objects.equals(this.name, blueprintTemplate.name) &&
        Objects.equals(this.description, blueprintTemplate.description) &&
        Objects.equals(this.space, blueprintTemplate.space) &&
        Objects.equals(this.labels, blueprintTemplate.labels) &&
        Objects.equals(this.templateType, blueprintTemplate.templateType) &&
        Objects.equals(this.editorVersion, blueprintTemplate.editorVersion) &&
        Objects.equals(this.body, blueprintTemplate.body) &&
        Objects.equals(this.expandable, blueprintTemplate.expandable) &&
        Objects.equals(this.links, blueprintTemplate.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, originalTemplate, referencingBlueprint, name, description, space, labels, templateType, editorVersion, body, expandable, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintTemplate {\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    originalTemplate: ").append(toIndentedString(originalTemplate)).append("\n");
    sb.append("    referencingBlueprint: ").append(toIndentedString(referencingBlueprint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    editorVersion: ").append(toIndentedString(editorVersion)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    expandable: ").append(toIndentedString(expandable)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("templateId");
    openapiFields.add("originalTemplate");
    openapiFields.add("referencingBlueprint");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("space");
    openapiFields.add("labels");
    openapiFields.add("templateType");
    openapiFields.add("editorVersion");
    openapiFields.add("body");
    openapiFields.add("_expandable");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("templateId");
    openapiRequiredFields.add("originalTemplate");
    openapiRequiredFields.add("referencingBlueprint");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("templateType");
    openapiRequiredFields.add("_links");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlueprintTemplate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueprintTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueprintTemplate is not found in the empty JSON string", BlueprintTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlueprintTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueprintTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlueprintTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
      // validate the required field `originalTemplate`
      BlueprintTemplateOriginalTemplate.validateJsonElement(jsonObj.get("originalTemplate"));
      if (!jsonObj.get("referencingBlueprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referencingBlueprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referencingBlueprint").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }

      JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
      // validate the required field `labels` (array)
      for (int i = 0; i < jsonArraylabels.size(); i++) {
        Label.validateJsonElement(jsonArraylabels.get(i));
      };
      if (!jsonObj.get("templateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateType").toString()));
      }
      if ((jsonObj.get("editorVersion") != null && !jsonObj.get("editorVersion").isJsonNull()) && !jsonObj.get("editorVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorVersion").toString()));
      }
      // validate the optional field `body`
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) {
        ContentTemplateBody.validateJsonElement(jsonObj.get("body"));
      }
      // validate the optional field `_expandable`
      if (jsonObj.get("_expandable") != null && !jsonObj.get("_expandable").isJsonNull()) {
        BlueprintTemplateExpandable.validateJsonElement(jsonObj.get("_expandable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueprintTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueprintTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueprintTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueprintTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueprintTemplate>() {
           @Override
           public void write(JsonWriter out, BlueprintTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueprintTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlueprintTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlueprintTemplate
  * @throws IOException if the JSON string is invalid with respect to BlueprintTemplate
  */
  public static BlueprintTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueprintTemplate.class);
  }

 /**
  * Convert an instance of BlueprintTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

