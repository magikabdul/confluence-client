/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import cloud.cholewa.confluence.model.Content;
import cloud.cholewa.confluence.model.ContentBody;
import cloud.cholewa.confluence.model.ContentChildType;
import cloud.cholewa.confluence.model.ContentChildren;
import cloud.cholewa.confluence.model.ContentExpandable;
import cloud.cholewa.confluence.model.ContentHistory;
import cloud.cholewa.confluence.model.ContentMetadata;
import cloud.cholewa.confluence.model.ContentRestrictions;
import cloud.cholewa.confluence.model.GenericLinksValue;
import cloud.cholewa.confluence.model.OperationCheckResult;
import cloud.cholewa.confluence.model.Space;
import cloud.cholewa.confluence.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * Representation of a blogpost (content)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentBlogpost {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  private Space space;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private ContentHistory history;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public static final String SERIALIZED_NAME_ANCESTORS = "ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private List<Content> ancestors;

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private List<OperationCheckResult> operations;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private ContentChildren children;

  public static final String SERIALIZED_NAME_CHILD_TYPES = "childTypes";
  @SerializedName(SERIALIZED_NAME_CHILD_TYPES)
  private ContentChildType childTypes;

  public static final String SERIALIZED_NAME_DESCENDANTS = "descendants";
  @SerializedName(SERIALIZED_NAME_DESCENDANTS)
  private ContentChildren descendants;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private Map<String, Object> container;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private ContentBody body;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private ContentRestrictions restrictions;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ContentMetadata metadata;

  public static final String SERIALIZED_NAME_MACRO_RENDERED_OUTPUT = "macroRenderedOutput";
  @SerializedName(SERIALIZED_NAME_MACRO_RENDERED_OUTPUT)
  private Map<String, Object> macroRenderedOutput = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private Object extensions;

  public static final String SERIALIZED_NAME_EXPANDABLE = "_expandable";
  @SerializedName(SERIALIZED_NAME_EXPANDABLE)
  private ContentExpandable expandable;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, GenericLinksValue> links = new HashMap<>();

  public ContentBlogpost() {
  }

  public ContentBlogpost id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ContentBlogpost type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Can be \&quot;page\&quot;, \&quot;blogpost\&quot;, \&quot;attachment\&quot; or \&quot;content\&quot;
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ContentBlogpost status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ContentBlogpost title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ContentBlogpost space(Space space) {
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @javax.annotation.Nullable
  public Space getSpace() {
    return space;
  }

  public void setSpace(Space space) {
    this.space = space;
  }


  public ContentBlogpost history(ContentHistory history) {
    this.history = history;
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @javax.annotation.Nullable
  public ContentHistory getHistory() {
    return history;
  }

  public void setHistory(ContentHistory history) {
    this.history = history;
  }


  public ContentBlogpost version(Version version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Version getVersion() {
    return version;
  }

  public void setVersion(Version version) {
    this.version = version;
  }


  public ContentBlogpost ancestors(List<Content> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public ContentBlogpost addAncestorsItem(Content ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

   /**
   * Get ancestors
   * @return ancestors
  **/
  @javax.annotation.Nullable
  public List<Content> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<Content> ancestors) {
    this.ancestors = ancestors;
  }


  public ContentBlogpost operations(List<OperationCheckResult> operations) {
    this.operations = operations;
    return this;
  }

  public ContentBlogpost addOperationsItem(OperationCheckResult operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

   /**
   * Get operations
   * @return operations
  **/
  @javax.annotation.Nullable
  public List<OperationCheckResult> getOperations() {
    return operations;
  }

  public void setOperations(List<OperationCheckResult> operations) {
    this.operations = operations;
  }


  public ContentBlogpost children(ContentChildren children) {
    this.children = children;
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  public ContentChildren getChildren() {
    return children;
  }

  public void setChildren(ContentChildren children) {
    this.children = children;
  }


  public ContentBlogpost childTypes(ContentChildType childTypes) {
    this.childTypes = childTypes;
    return this;
  }

   /**
   * Get childTypes
   * @return childTypes
  **/
  @javax.annotation.Nullable
  public ContentChildType getChildTypes() {
    return childTypes;
  }

  public void setChildTypes(ContentChildType childTypes) {
    this.childTypes = childTypes;
  }


  public ContentBlogpost descendants(ContentChildren descendants) {
    this.descendants = descendants;
    return this;
  }

   /**
   * Get descendants
   * @return descendants
  **/
  @javax.annotation.Nullable
  public ContentChildren getDescendants() {
    return descendants;
  }

  public void setDescendants(ContentChildren descendants) {
    this.descendants = descendants;
  }


  public ContentBlogpost container(Map<String, Object> container) {
    this.container = container;
    return this;
  }

  public ContentBlogpost putContainerItem(String key, Object containerItem) {
    if (this.container == null) {
      this.container = new HashMap<>();
    }
    this.container.put(key, containerItem);
    return this;
  }

   /**
   * Container for content. This can be either a space (containing a page or blogpost) or a page/blog post (containing an attachment or comment)
   * @return container
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getContainer() {
    return container;
  }

  public void setContainer(Map<String, Object> container) {
    this.container = container;
  }


  public ContentBlogpost body(ContentBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  public ContentBody getBody() {
    return body;
  }

  public void setBody(ContentBody body) {
    this.body = body;
  }


  public ContentBlogpost restrictions(ContentRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @javax.annotation.Nullable
  public ContentRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(ContentRestrictions restrictions) {
    this.restrictions = restrictions;
  }


  public ContentBlogpost metadata(ContentMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public ContentMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ContentMetadata metadata) {
    this.metadata = metadata;
  }


  public ContentBlogpost macroRenderedOutput(Map<String, Object> macroRenderedOutput) {
    this.macroRenderedOutput = macroRenderedOutput;
    return this;
  }

  public ContentBlogpost putMacroRenderedOutputItem(String key, Object macroRenderedOutputItem) {
    if (this.macroRenderedOutput == null) {
      this.macroRenderedOutput = new HashMap<>();
    }
    this.macroRenderedOutput.put(key, macroRenderedOutputItem);
    return this;
  }

   /**
   * Get macroRenderedOutput
   * @return macroRenderedOutput
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getMacroRenderedOutput() {
    return macroRenderedOutput;
  }

  public void setMacroRenderedOutput(Map<String, Object> macroRenderedOutput) {
    this.macroRenderedOutput = macroRenderedOutput;
  }


  public ContentBlogpost extensions(Object extensions) {
    this.extensions = extensions;
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @javax.annotation.Nullable
  public Object getExtensions() {
    return extensions;
  }

  public void setExtensions(Object extensions) {
    this.extensions = extensions;
  }


  public ContentBlogpost expandable(ContentExpandable expandable) {
    this.expandable = expandable;
    return this;
  }

   /**
   * Get expandable
   * @return expandable
  **/
  @javax.annotation.Nullable
  public ContentExpandable getExpandable() {
    return expandable;
  }

  public void setExpandable(ContentExpandable expandable) {
    this.expandable = expandable;
  }


  public ContentBlogpost links(Map<String, GenericLinksValue> links) {
    this.links = links;
    return this;
  }

  public ContentBlogpost putLinksItem(String key, GenericLinksValue linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nonnull
  public Map<String, GenericLinksValue> getLinks() {
    return links;
  }

  public void setLinks(Map<String, GenericLinksValue> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentBlogpost contentBlogpost = (ContentBlogpost) o;
    return Objects.equals(this.id, contentBlogpost.id) &&
        Objects.equals(this.type, contentBlogpost.type) &&
        Objects.equals(this.status, contentBlogpost.status) &&
        Objects.equals(this.title, contentBlogpost.title) &&
        Objects.equals(this.space, contentBlogpost.space) &&
        Objects.equals(this.history, contentBlogpost.history) &&
        Objects.equals(this.version, contentBlogpost.version) &&
        Objects.equals(this.ancestors, contentBlogpost.ancestors) &&
        Objects.equals(this.operations, contentBlogpost.operations) &&
        Objects.equals(this.children, contentBlogpost.children) &&
        Objects.equals(this.childTypes, contentBlogpost.childTypes) &&
        Objects.equals(this.descendants, contentBlogpost.descendants) &&
        Objects.equals(this.container, contentBlogpost.container) &&
        Objects.equals(this.body, contentBlogpost.body) &&
        Objects.equals(this.restrictions, contentBlogpost.restrictions) &&
        Objects.equals(this.metadata, contentBlogpost.metadata) &&
        Objects.equals(this.macroRenderedOutput, contentBlogpost.macroRenderedOutput) &&
        Objects.equals(this.extensions, contentBlogpost.extensions) &&
        Objects.equals(this.expandable, contentBlogpost.expandable) &&
        Objects.equals(this.links, contentBlogpost.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, status, title, space, history, version, ancestors, operations, children, childTypes, descendants, container, body, restrictions, metadata, macroRenderedOutput, extensions, expandable, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentBlogpost {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    childTypes: ").append(toIndentedString(childTypes)).append("\n");
    sb.append("    descendants: ").append(toIndentedString(descendants)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    macroRenderedOutput: ").append(toIndentedString(macroRenderedOutput)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    expandable: ").append(toIndentedString(expandable)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("space");
    openapiFields.add("history");
    openapiFields.add("version");
    openapiFields.add("ancestors");
    openapiFields.add("operations");
    openapiFields.add("children");
    openapiFields.add("childTypes");
    openapiFields.add("descendants");
    openapiFields.add("container");
    openapiFields.add("body");
    openapiFields.add("restrictions");
    openapiFields.add("metadata");
    openapiFields.add("macroRenderedOutput");
    openapiFields.add("extensions");
    openapiFields.add("_expandable");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("_links");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentBlogpost
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentBlogpost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentBlogpost is not found in the empty JSON string", ContentBlogpost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentBlogpost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentBlogpost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentBlogpost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `space`
      if (jsonObj.get("space") != null && !jsonObj.get("space").isJsonNull()) {
        Space.validateJsonElement(jsonObj.get("space"));
      }
      // validate the optional field `history`
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull()) {
        ContentHistory.validateJsonElement(jsonObj.get("history"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ancestors") != null && !jsonObj.get("ancestors").isJsonNull() && !jsonObj.get("ancestors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestors` to be an array in the JSON string but got `%s`", jsonObj.get("ancestors").toString()));
      }
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull()) {
        JsonArray jsonArrayoperations = jsonObj.getAsJsonArray("operations");
        if (jsonArrayoperations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operations` to be an array in the JSON string but got `%s`", jsonObj.get("operations").toString()));
          }

          // validate the optional field `operations` (array)
          for (int i = 0; i < jsonArrayoperations.size(); i++) {
            OperationCheckResult.validateJsonElement(jsonArrayoperations.get(i));
          };
        }
      }
      // validate the optional field `body`
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) {
        ContentBody.validateJsonElement(jsonObj.get("body"));
      }
      // validate the optional field `restrictions`
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        ContentRestrictions.validateJsonElement(jsonObj.get("restrictions"));
      }
      // validate the optional field `_expandable`
      if (jsonObj.get("_expandable") != null && !jsonObj.get("_expandable").isJsonNull()) {
        ContentExpandable.validateJsonElement(jsonObj.get("_expandable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentBlogpost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentBlogpost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentBlogpost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentBlogpost.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentBlogpost>() {
           @Override
           public void write(JsonWriter out, ContentBlogpost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentBlogpost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentBlogpost given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentBlogpost
  * @throws IOException if the JSON string is invalid with respect to ContentBlogpost
  */
  public static ContentBlogpost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentBlogpost.class);
  }

 /**
  * Convert an instance of ContentBlogpost to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

