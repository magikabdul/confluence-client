/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import cloud.cholewa.confluence.model.CopyPageHierarchyTitleOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * CopyPageHierarchyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CopyPageHierarchyRequest {
  public static final String SERIALIZED_NAME_COPY_ATTACHMENTS = "copyAttachments";
  @SerializedName(SERIALIZED_NAME_COPY_ATTACHMENTS)
  private Boolean copyAttachments = false;

  public static final String SERIALIZED_NAME_COPY_PERMISSIONS = "copyPermissions";
  @SerializedName(SERIALIZED_NAME_COPY_PERMISSIONS)
  private Boolean copyPermissions = false;

  public static final String SERIALIZED_NAME_COPY_PROPERTIES = "copyProperties";
  @SerializedName(SERIALIZED_NAME_COPY_PROPERTIES)
  private Boolean copyProperties = false;

  public static final String SERIALIZED_NAME_COPY_LABELS = "copyLabels";
  @SerializedName(SERIALIZED_NAME_COPY_LABELS)
  private Boolean copyLabels = false;

  public static final String SERIALIZED_NAME_COPY_CUSTOM_CONTENTS = "copyCustomContents";
  @SerializedName(SERIALIZED_NAME_COPY_CUSTOM_CONTENTS)
  private Boolean copyCustomContents = false;

  public static final String SERIALIZED_NAME_COPY_DESCENDANTS = "copyDescendants";
  @SerializedName(SERIALIZED_NAME_COPY_DESCENDANTS)
  private Boolean copyDescendants = true;

  public static final String SERIALIZED_NAME_DESTINATION_PAGE_ID = "destinationPageId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PAGE_ID)
  private String destinationPageId;

  public static final String SERIALIZED_NAME_TITLE_OPTIONS = "titleOptions";
  @SerializedName(SERIALIZED_NAME_TITLE_OPTIONS)
  private CopyPageHierarchyTitleOptions titleOptions;

  public CopyPageHierarchyRequest() {
  }

  public CopyPageHierarchyRequest copyAttachments(Boolean copyAttachments) {
    this.copyAttachments = copyAttachments;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, attachments are copied to the destination page.
   * @return copyAttachments
  **/
  @javax.annotation.Nullable
  public Boolean getCopyAttachments() {
    return copyAttachments;
  }

  public void setCopyAttachments(Boolean copyAttachments) {
    this.copyAttachments = copyAttachments;
  }


  public CopyPageHierarchyRequest copyPermissions(Boolean copyPermissions) {
    this.copyPermissions = copyPermissions;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, page permissions are copied to the destination page.
   * @return copyPermissions
  **/
  @javax.annotation.Nullable
  public Boolean getCopyPermissions() {
    return copyPermissions;
  }

  public void setCopyPermissions(Boolean copyPermissions) {
    this.copyPermissions = copyPermissions;
  }


  public CopyPageHierarchyRequest copyProperties(Boolean copyProperties) {
    this.copyProperties = copyProperties;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, content properties are copied to the destination page.
   * @return copyProperties
  **/
  @javax.annotation.Nullable
  public Boolean getCopyProperties() {
    return copyProperties;
  }

  public void setCopyProperties(Boolean copyProperties) {
    this.copyProperties = copyProperties;
  }


  public CopyPageHierarchyRequest copyLabels(Boolean copyLabels) {
    this.copyLabels = copyLabels;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, labels are copied to the destination page.
   * @return copyLabels
  **/
  @javax.annotation.Nullable
  public Boolean getCopyLabels() {
    return copyLabels;
  }

  public void setCopyLabels(Boolean copyLabels) {
    this.copyLabels = copyLabels;
  }


  public CopyPageHierarchyRequest copyCustomContents(Boolean copyCustomContents) {
    this.copyCustomContents = copyCustomContents;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, custom contents are copied to the destination page.
   * @return copyCustomContents
  **/
  @javax.annotation.Nullable
  public Boolean getCopyCustomContents() {
    return copyCustomContents;
  }

  public void setCopyCustomContents(Boolean copyCustomContents) {
    this.copyCustomContents = copyCustomContents;
  }


  public CopyPageHierarchyRequest copyDescendants(Boolean copyDescendants) {
    this.copyDescendants = copyDescendants;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, descendants are copied to the destination page.
   * @return copyDescendants
  **/
  @javax.annotation.Nullable
  public Boolean getCopyDescendants() {
    return copyDescendants;
  }

  public void setCopyDescendants(Boolean copyDescendants) {
    this.copyDescendants = copyDescendants;
  }


  public CopyPageHierarchyRequest destinationPageId(String destinationPageId) {
    this.destinationPageId = destinationPageId;
    return this;
  }

   /**
   * Get destinationPageId
   * @return destinationPageId
  **/
  @javax.annotation.Nonnull
  public String getDestinationPageId() {
    return destinationPageId;
  }

  public void setDestinationPageId(String destinationPageId) {
    this.destinationPageId = destinationPageId;
  }


  public CopyPageHierarchyRequest titleOptions(CopyPageHierarchyTitleOptions titleOptions) {
    this.titleOptions = titleOptions;
    return this;
  }

   /**
   * Get titleOptions
   * @return titleOptions
  **/
  @javax.annotation.Nullable
  public CopyPageHierarchyTitleOptions getTitleOptions() {
    return titleOptions;
  }

  public void setTitleOptions(CopyPageHierarchyTitleOptions titleOptions) {
    this.titleOptions = titleOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyPageHierarchyRequest copyPageHierarchyRequest = (CopyPageHierarchyRequest) o;
    return Objects.equals(this.copyAttachments, copyPageHierarchyRequest.copyAttachments) &&
        Objects.equals(this.copyPermissions, copyPageHierarchyRequest.copyPermissions) &&
        Objects.equals(this.copyProperties, copyPageHierarchyRequest.copyProperties) &&
        Objects.equals(this.copyLabels, copyPageHierarchyRequest.copyLabels) &&
        Objects.equals(this.copyCustomContents, copyPageHierarchyRequest.copyCustomContents) &&
        Objects.equals(this.copyDescendants, copyPageHierarchyRequest.copyDescendants) &&
        Objects.equals(this.destinationPageId, copyPageHierarchyRequest.destinationPageId) &&
        Objects.equals(this.titleOptions, copyPageHierarchyRequest.titleOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyAttachments, copyPermissions, copyProperties, copyLabels, copyCustomContents, copyDescendants, destinationPageId, titleOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyPageHierarchyRequest {\n");
    sb.append("    copyAttachments: ").append(toIndentedString(copyAttachments)).append("\n");
    sb.append("    copyPermissions: ").append(toIndentedString(copyPermissions)).append("\n");
    sb.append("    copyProperties: ").append(toIndentedString(copyProperties)).append("\n");
    sb.append("    copyLabels: ").append(toIndentedString(copyLabels)).append("\n");
    sb.append("    copyCustomContents: ").append(toIndentedString(copyCustomContents)).append("\n");
    sb.append("    copyDescendants: ").append(toIndentedString(copyDescendants)).append("\n");
    sb.append("    destinationPageId: ").append(toIndentedString(destinationPageId)).append("\n");
    sb.append("    titleOptions: ").append(toIndentedString(titleOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copyAttachments");
    openapiFields.add("copyPermissions");
    openapiFields.add("copyProperties");
    openapiFields.add("copyLabels");
    openapiFields.add("copyCustomContents");
    openapiFields.add("copyDescendants");
    openapiFields.add("destinationPageId");
    openapiFields.add("titleOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationPageId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CopyPageHierarchyRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyPageHierarchyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyPageHierarchyRequest is not found in the empty JSON string", CopyPageHierarchyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopyPageHierarchyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopyPageHierarchyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CopyPageHierarchyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destinationPageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationPageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationPageId").toString()));
      }
      // validate the optional field `titleOptions`
      if (jsonObj.get("titleOptions") != null && !jsonObj.get("titleOptions").isJsonNull()) {
        CopyPageHierarchyTitleOptions.validateJsonElement(jsonObj.get("titleOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopyPageHierarchyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopyPageHierarchyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopyPageHierarchyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopyPageHierarchyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CopyPageHierarchyRequest>() {
           @Override
           public void write(JsonWriter out, CopyPageHierarchyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopyPageHierarchyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CopyPageHierarchyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CopyPageHierarchyRequest
  * @throws IOException if the JSON string is invalid with respect to CopyPageHierarchyRequest
  */
  public static CopyPageHierarchyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyPageHierarchyRequest.class);
  }

 /**
  * Convert an instance of CopyPageHierarchyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

