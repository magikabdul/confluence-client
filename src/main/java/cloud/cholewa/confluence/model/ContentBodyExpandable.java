/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * ContentBodyExpandable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentBodyExpandable {
  public static final String SERIALIZED_NAME_EDITOR = "editor";
  @SerializedName(SERIALIZED_NAME_EDITOR)
  private String editor;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private String view;

  public static final String SERIALIZED_NAME_EXPORT_VIEW = "export_view";
  @SerializedName(SERIALIZED_NAME_EXPORT_VIEW)
  private String exportView;

  public static final String SERIALIZED_NAME_STYLED_VIEW = "styled_view";
  @SerializedName(SERIALIZED_NAME_STYLED_VIEW)
  private String styledView;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private String storage;

  public static final String SERIALIZED_NAME_EDITOR2 = "editor2";
  @SerializedName(SERIALIZED_NAME_EDITOR2)
  private String editor2;

  public static final String SERIALIZED_NAME_ANONYMOUS_EXPORT_VIEW = "anonymous_export_view";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_EXPORT_VIEW)
  private String anonymousExportView;

  public static final String SERIALIZED_NAME_ATLAS_DOC_FORMAT = "atlas_doc_format";
  @SerializedName(SERIALIZED_NAME_ATLAS_DOC_FORMAT)
  private String atlasDocFormat;

  public static final String SERIALIZED_NAME_WIKI = "wiki";
  @SerializedName(SERIALIZED_NAME_WIKI)
  private String wiki;

  public static final String SERIALIZED_NAME_DYNAMIC = "dynamic";
  @SerializedName(SERIALIZED_NAME_DYNAMIC)
  private String dynamic;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private String raw;

  public ContentBodyExpandable() {
  }

  public ContentBodyExpandable editor(String editor) {
    this.editor = editor;
    return this;
  }

   /**
   * Get editor
   * @return editor
  **/
  @javax.annotation.Nullable
  public String getEditor() {
    return editor;
  }

  public void setEditor(String editor) {
    this.editor = editor;
  }


  public ContentBodyExpandable view(String view) {
    this.view = view;
    return this;
  }

   /**
   * Get view
   * @return view
  **/
  @javax.annotation.Nullable
  public String getView() {
    return view;
  }

  public void setView(String view) {
    this.view = view;
  }


  public ContentBodyExpandable exportView(String exportView) {
    this.exportView = exportView;
    return this;
  }

   /**
   * Get exportView
   * @return exportView
  **/
  @javax.annotation.Nullable
  public String getExportView() {
    return exportView;
  }

  public void setExportView(String exportView) {
    this.exportView = exportView;
  }


  public ContentBodyExpandable styledView(String styledView) {
    this.styledView = styledView;
    return this;
  }

   /**
   * Get styledView
   * @return styledView
  **/
  @javax.annotation.Nullable
  public String getStyledView() {
    return styledView;
  }

  public void setStyledView(String styledView) {
    this.styledView = styledView;
  }


  public ContentBodyExpandable storage(String storage) {
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @javax.annotation.Nullable
  public String getStorage() {
    return storage;
  }

  public void setStorage(String storage) {
    this.storage = storage;
  }


  public ContentBodyExpandable editor2(String editor2) {
    this.editor2 = editor2;
    return this;
  }

   /**
   * Get editor2
   * @return editor2
  **/
  @javax.annotation.Nullable
  public String getEditor2() {
    return editor2;
  }

  public void setEditor2(String editor2) {
    this.editor2 = editor2;
  }


  public ContentBodyExpandable anonymousExportView(String anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
    return this;
  }

   /**
   * Get anonymousExportView
   * @return anonymousExportView
  **/
  @javax.annotation.Nullable
  public String getAnonymousExportView() {
    return anonymousExportView;
  }

  public void setAnonymousExportView(String anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
  }


  public ContentBodyExpandable atlasDocFormat(String atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
    return this;
  }

   /**
   * Get atlasDocFormat
   * @return atlasDocFormat
  **/
  @javax.annotation.Nullable
  public String getAtlasDocFormat() {
    return atlasDocFormat;
  }

  public void setAtlasDocFormat(String atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
  }


  public ContentBodyExpandable wiki(String wiki) {
    this.wiki = wiki;
    return this;
  }

   /**
   * Get wiki
   * @return wiki
  **/
  @javax.annotation.Nullable
  public String getWiki() {
    return wiki;
  }

  public void setWiki(String wiki) {
    this.wiki = wiki;
  }


  public ContentBodyExpandable dynamic(String dynamic) {
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Get dynamic
   * @return dynamic
  **/
  @javax.annotation.Nullable
  public String getDynamic() {
    return dynamic;
  }

  public void setDynamic(String dynamic) {
    this.dynamic = dynamic;
  }


  public ContentBodyExpandable raw(String raw) {
    this.raw = raw;
    return this;
  }

   /**
   * Get raw
   * @return raw
  **/
  @javax.annotation.Nullable
  public String getRaw() {
    return raw;
  }

  public void setRaw(String raw) {
    this.raw = raw;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentBodyExpandable contentBodyExpandable = (ContentBodyExpandable) o;
    return Objects.equals(this.editor, contentBodyExpandable.editor) &&
        Objects.equals(this.view, contentBodyExpandable.view) &&
        Objects.equals(this.exportView, contentBodyExpandable.exportView) &&
        Objects.equals(this.styledView, contentBodyExpandable.styledView) &&
        Objects.equals(this.storage, contentBodyExpandable.storage) &&
        Objects.equals(this.editor2, contentBodyExpandable.editor2) &&
        Objects.equals(this.anonymousExportView, contentBodyExpandable.anonymousExportView) &&
        Objects.equals(this.atlasDocFormat, contentBodyExpandable.atlasDocFormat) &&
        Objects.equals(this.wiki, contentBodyExpandable.wiki) &&
        Objects.equals(this.dynamic, contentBodyExpandable.dynamic) &&
        Objects.equals(this.raw, contentBodyExpandable.raw);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editor, view, exportView, styledView, storage, editor2, anonymousExportView, atlasDocFormat, wiki, dynamic, raw);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentBodyExpandable {\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    exportView: ").append(toIndentedString(exportView)).append("\n");
    sb.append("    styledView: ").append(toIndentedString(styledView)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    editor2: ").append(toIndentedString(editor2)).append("\n");
    sb.append("    anonymousExportView: ").append(toIndentedString(anonymousExportView)).append("\n");
    sb.append("    atlasDocFormat: ").append(toIndentedString(atlasDocFormat)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("editor");
    openapiFields.add("view");
    openapiFields.add("export_view");
    openapiFields.add("styled_view");
    openapiFields.add("storage");
    openapiFields.add("editor2");
    openapiFields.add("anonymous_export_view");
    openapiFields.add("atlas_doc_format");
    openapiFields.add("wiki");
    openapiFields.add("dynamic");
    openapiFields.add("raw");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentBodyExpandable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentBodyExpandable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentBodyExpandable is not found in the empty JSON string", ContentBodyExpandable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentBodyExpandable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentBodyExpandable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("editor") != null && !jsonObj.get("editor").isJsonNull()) && !jsonObj.get("editor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editor").toString()));
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
      if ((jsonObj.get("export_view") != null && !jsonObj.get("export_view").isJsonNull()) && !jsonObj.get("export_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `export_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("export_view").toString()));
      }
      if ((jsonObj.get("styled_view") != null && !jsonObj.get("styled_view").isJsonNull()) && !jsonObj.get("styled_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `styled_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("styled_view").toString()));
      }
      if ((jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) && !jsonObj.get("storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage").toString()));
      }
      if ((jsonObj.get("editor2") != null && !jsonObj.get("editor2").isJsonNull()) && !jsonObj.get("editor2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editor2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editor2").toString()));
      }
      if ((jsonObj.get("anonymous_export_view") != null && !jsonObj.get("anonymous_export_view").isJsonNull()) && !jsonObj.get("anonymous_export_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonymous_export_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anonymous_export_view").toString()));
      }
      if ((jsonObj.get("atlas_doc_format") != null && !jsonObj.get("atlas_doc_format").isJsonNull()) && !jsonObj.get("atlas_doc_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atlas_doc_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atlas_doc_format").toString()));
      }
      if ((jsonObj.get("wiki") != null && !jsonObj.get("wiki").isJsonNull()) && !jsonObj.get("wiki").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wiki` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wiki").toString()));
      }
      if ((jsonObj.get("dynamic") != null && !jsonObj.get("dynamic").isJsonNull()) && !jsonObj.get("dynamic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dynamic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dynamic").toString()));
      }
      if ((jsonObj.get("raw") != null && !jsonObj.get("raw").isJsonNull()) && !jsonObj.get("raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentBodyExpandable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentBodyExpandable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentBodyExpandable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentBodyExpandable.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentBodyExpandable>() {
           @Override
           public void write(JsonWriter out, ContentBodyExpandable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentBodyExpandable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentBodyExpandable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentBodyExpandable
  * @throws IOException if the JSON string is invalid with respect to ContentBodyExpandable
  */
  public static ContentBodyExpandable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentBodyExpandable.class);
  }

 /**
  * Convert an instance of ContentBodyExpandable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

