/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import cloud.cholewa.confluence.model.Content;
import cloud.cholewa.confluence.model.ContentBody;
import cloud.cholewa.confluence.model.ContentChildType;
import cloud.cholewa.confluence.model.ContentChildren;
import cloud.cholewa.confluence.model.ContentCreateSpaceHistory;
import cloud.cholewa.confluence.model.ContentRestrictions;
import cloud.cholewa.confluence.model.GenericLinksValue;
import cloud.cholewa.confluence.model.Icon;
import cloud.cholewa.confluence.model.LookAndFeel;
import cloud.cholewa.confluence.model.OperationCheckResult;
import cloud.cholewa.confluence.model.Space;
import cloud.cholewa.confluence.model.SpaceDescription;
import cloud.cholewa.confluence.model.SpaceExpandable;
import cloud.cholewa.confluence.model.SpaceMetadata;
import cloud.cholewa.confluence.model.SpacePermission;
import cloud.cholewa.confluence.model.SpaceSettings;
import cloud.cholewa.confluence.model.Theme;
import cloud.cholewa.confluence.model.User;
import cloud.cholewa.confluence.model.UserDetails;
import cloud.cholewa.confluence.model.Version;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import cloud.cholewa.confluence.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RelationSource extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RelationSource.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RelationSource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RelationSource' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Content> adapterContent = gson.getDelegateAdapter(this, TypeToken.get(Content.class));
            final TypeAdapter<User> adapterUser = gson.getDelegateAdapter(this, TypeToken.get(User.class));
            final TypeAdapter<Space> adapterSpace = gson.getDelegateAdapter(this, TypeToken.get(Space.class));

            return (TypeAdapter<T>) new TypeAdapter<RelationSource>() {
                @Override
                public void write(JsonWriter out, RelationSource value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Content`
                    if (value.getActualInstance() instanceof Content) {
                      JsonElement element = adapterContent.toJsonTree((Content)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `User`
                    if (value.getActualInstance() instanceof User) {
                      JsonElement element = adapterUser.toJsonTree((User)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `Space`
                    if (value.getActualInstance() instanceof Space) {
                      JsonElement element = adapterSpace.toJsonTree((Space)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Content, Space, User");
                }

                @Override
                public RelationSource read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Content
                    try {
                      // validate the JSON object to see if any exception is thrown
                      Content.validateJsonElement(jsonElement);
                      actualAdapter = adapterContent;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'Content'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for Content failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'Content'", e);
                    }
                    // deserialize User
                    try {
                      // validate the JSON object to see if any exception is thrown
                      User.validateJsonElement(jsonElement);
                      actualAdapter = adapterUser;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'User'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for User failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'User'", e);
                    }
                    // deserialize Space
                    try {
                      // validate the JSON object to see if any exception is thrown
                      Space.validateJsonElement(jsonElement);
                      actualAdapter = adapterSpace;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'Space'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for Space failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'Space'", e);
                    }

                    if (match == 1) {
                        RelationSource ret = new RelationSource();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RelationSource: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RelationSource() {
        super("oneOf", Boolean.FALSE);
    }

    public RelationSource(Content o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RelationSource(Space o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RelationSource(User o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Content", Content.class);
        schemas.put("User", User.class);
        schemas.put("Space", Space.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RelationSource.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Content, Space, User
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Content) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof User) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Space) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Content, Space, User");
    }

    /**
     * Get the actual instance, which can be the following:
     * Content, Space, User
     *
     * @return The actual instance (Content, Space, User)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Content`. If the actual instance is not `Content`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Content`
     * @throws ClassCastException if the instance is not `Content`
     */
    public Content getContent() throws ClassCastException {
        return (Content)super.getActualInstance();
    }
    /**
     * Get the actual instance of `User`. If the actual instance is not `User`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `User`
     * @throws ClassCastException if the instance is not `User`
     */
    public User getUser() throws ClassCastException {
        return (User)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Space`. If the actual instance is not `Space`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Space`
     * @throws ClassCastException if the instance is not `Space`
     */
    public Space getSpace() throws ClassCastException {
        return (Space)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RelationSource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with Content
    try {
      Content.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Content failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with User
    try {
      User.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for User failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Space
    try {
      Space.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Space failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for RelationSource with oneOf schemas: Content, Space, User. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of RelationSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RelationSource
  * @throws IOException if the JSON string is invalid with respect to RelationSource
  */
  public static RelationSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationSource.class);
  }

 /**
  * Convert an instance of RelationSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

