/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import cloud.cholewa.confluence.model.ContentState;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * ContentStateSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentStateSettings {
  public static final String SERIALIZED_NAME_CONTENT_STATES_ALLOWED = "contentStatesAllowed";
  @SerializedName(SERIALIZED_NAME_CONTENT_STATES_ALLOWED)
  private Boolean contentStatesAllowed;

  public static final String SERIALIZED_NAME_CUSTOM_CONTENT_STATES_ALLOWED = "customContentStatesAllowed";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONTENT_STATES_ALLOWED)
  private Boolean customContentStatesAllowed;

  public static final String SERIALIZED_NAME_SPACE_CONTENT_STATES_ALLOWED = "spaceContentStatesAllowed";
  @SerializedName(SERIALIZED_NAME_SPACE_CONTENT_STATES_ALLOWED)
  private Boolean spaceContentStatesAllowed;

  public static final String SERIALIZED_NAME_SPACE_CONTENT_STATES = "spaceContentStates";
  @SerializedName(SERIALIZED_NAME_SPACE_CONTENT_STATES)
  private List<ContentState> spaceContentStates;

  public ContentStateSettings() {
  }

  public ContentStateSettings contentStatesAllowed(Boolean contentStatesAllowed) {
    this.contentStatesAllowed = contentStatesAllowed;
    return this;
  }

   /**
   * Whether users can place any content states on content
   * @return contentStatesAllowed
  **/
  @javax.annotation.Nonnull
  public Boolean getContentStatesAllowed() {
    return contentStatesAllowed;
  }

  public void setContentStatesAllowed(Boolean contentStatesAllowed) {
    this.contentStatesAllowed = contentStatesAllowed;
  }


  public ContentStateSettings customContentStatesAllowed(Boolean customContentStatesAllowed) {
    this.customContentStatesAllowed = customContentStatesAllowed;
    return this;
  }

   /**
   * Whether users can place their custom states on content
   * @return customContentStatesAllowed
  **/
  @javax.annotation.Nonnull
  public Boolean getCustomContentStatesAllowed() {
    return customContentStatesAllowed;
  }

  public void setCustomContentStatesAllowed(Boolean customContentStatesAllowed) {
    this.customContentStatesAllowed = customContentStatesAllowed;
  }


  public ContentStateSettings spaceContentStatesAllowed(Boolean spaceContentStatesAllowed) {
    this.spaceContentStatesAllowed = spaceContentStatesAllowed;
    return this;
  }

   /**
   * Whether users can place space suggested states on content
   * @return spaceContentStatesAllowed
  **/
  @javax.annotation.Nonnull
  public Boolean getSpaceContentStatesAllowed() {
    return spaceContentStatesAllowed;
  }

  public void setSpaceContentStatesAllowed(Boolean spaceContentStatesAllowed) {
    this.spaceContentStatesAllowed = spaceContentStatesAllowed;
  }


  public ContentStateSettings spaceContentStates(List<ContentState> spaceContentStates) {
    this.spaceContentStates = spaceContentStates;
    return this;
  }

  public ContentStateSettings addSpaceContentStatesItem(ContentState spaceContentStatesItem) {
    if (this.spaceContentStates == null) {
      this.spaceContentStates = new ArrayList<>();
    }
    this.spaceContentStates.add(spaceContentStatesItem);
    return this;
  }

   /**
   * space suggested content states that users can choose from
   * @return spaceContentStates
  **/
  @javax.annotation.Nullable
  public List<ContentState> getSpaceContentStates() {
    return spaceContentStates;
  }

  public void setSpaceContentStates(List<ContentState> spaceContentStates) {
    this.spaceContentStates = spaceContentStates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentStateSettings contentStateSettings = (ContentStateSettings) o;
    return Objects.equals(this.contentStatesAllowed, contentStateSettings.contentStatesAllowed) &&
        Objects.equals(this.customContentStatesAllowed, contentStateSettings.customContentStatesAllowed) &&
        Objects.equals(this.spaceContentStatesAllowed, contentStateSettings.spaceContentStatesAllowed) &&
        Objects.equals(this.spaceContentStates, contentStateSettings.spaceContentStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentStatesAllowed, customContentStatesAllowed, spaceContentStatesAllowed, spaceContentStates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentStateSettings {\n");
    sb.append("    contentStatesAllowed: ").append(toIndentedString(contentStatesAllowed)).append("\n");
    sb.append("    customContentStatesAllowed: ").append(toIndentedString(customContentStatesAllowed)).append("\n");
    sb.append("    spaceContentStatesAllowed: ").append(toIndentedString(spaceContentStatesAllowed)).append("\n");
    sb.append("    spaceContentStates: ").append(toIndentedString(spaceContentStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentStatesAllowed");
    openapiFields.add("customContentStatesAllowed");
    openapiFields.add("spaceContentStatesAllowed");
    openapiFields.add("spaceContentStates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contentStatesAllowed");
    openapiRequiredFields.add("customContentStatesAllowed");
    openapiRequiredFields.add("spaceContentStatesAllowed");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentStateSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentStateSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentStateSettings is not found in the empty JSON string", ContentStateSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentStateSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentStateSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentStateSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("spaceContentStates") != null && !jsonObj.get("spaceContentStates").isJsonNull()) {
        JsonArray jsonArrayspaceContentStates = jsonObj.getAsJsonArray("spaceContentStates");
        if (jsonArrayspaceContentStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spaceContentStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spaceContentStates` to be an array in the JSON string but got `%s`", jsonObj.get("spaceContentStates").toString()));
          }

          // validate the optional field `spaceContentStates` (array)
          for (int i = 0; i < jsonArrayspaceContentStates.size(); i++) {
            ContentState.validateJsonElement(jsonArrayspaceContentStates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentStateSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentStateSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentStateSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentStateSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentStateSettings>() {
           @Override
           public void write(JsonWriter out, ContentStateSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentStateSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentStateSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentStateSettings
  * @throws IOException if the JSON string is invalid with respect to ContentStateSettings
  */
  public static ContentStateSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentStateSettings.class);
  }

 /**
  * Convert an instance of ContentStateSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

