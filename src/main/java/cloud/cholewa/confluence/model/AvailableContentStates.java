/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.cholewa.confluence.model;

import java.util.Objects;
import cloud.cholewa.confluence.model.ContentState;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.cholewa.confluence.JSON;

/**
 * AvailableContentStates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AvailableContentStates {
  public static final String SERIALIZED_NAME_SPACE_CONTENT_STATES = "spaceContentStates";
  @SerializedName(SERIALIZED_NAME_SPACE_CONTENT_STATES)
  private List<ContentState> spaceContentStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_CONTENT_STATES = "customContentStates";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONTENT_STATES)
  private List<ContentState> customContentStates = new ArrayList<>();

  public AvailableContentStates() {
  }

  public AvailableContentStates spaceContentStates(List<ContentState> spaceContentStates) {
    this.spaceContentStates = spaceContentStates;
    return this;
  }

  public AvailableContentStates addSpaceContentStatesItem(ContentState spaceContentStatesItem) {
    if (this.spaceContentStates == null) {
      this.spaceContentStates = new ArrayList<>();
    }
    this.spaceContentStates.add(spaceContentStatesItem);
    return this;
  }

   /**
   * Space suggested content states that can be used in the space. This can be null if space content states are disabled in the space. This list can be empty if there are no space content states defined in the space. All spaces start with 3 default space content states, and this can be modified in the UI under space settings.
   * @return spaceContentStates
  **/
  @javax.annotation.Nonnull
  public List<ContentState> getSpaceContentStates() {
    return spaceContentStates;
  }

  public void setSpaceContentStates(List<ContentState> spaceContentStates) {
    this.spaceContentStates = spaceContentStates;
  }


  public AvailableContentStates customContentStates(List<ContentState> customContentStates) {
    this.customContentStates = customContentStates;
    return this;
  }

  public AvailableContentStates addCustomContentStatesItem(ContentState customContentStatesItem) {
    if (this.customContentStates == null) {
      this.customContentStates = new ArrayList<>();
    }
    this.customContentStates.add(customContentStatesItem);
    return this;
  }

   /**
   * Custom content states that can be used by the user on the content of this call. This can be null if custom content states are disabled in the space of the content. This list can be empty if there are no custom content states defined by the user. This will at most have 3 of the most recently published content states.  Only the calling user has access to place these states on content, but all users can see these states once they are placed.
   * @return customContentStates
  **/
  @javax.annotation.Nonnull
  public List<ContentState> getCustomContentStates() {
    return customContentStates;
  }

  public void setCustomContentStates(List<ContentState> customContentStates) {
    this.customContentStates = customContentStates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableContentStates availableContentStates = (AvailableContentStates) o;
    return Objects.equals(this.spaceContentStates, availableContentStates.spaceContentStates) &&
        Objects.equals(this.customContentStates, availableContentStates.customContentStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spaceContentStates, customContentStates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableContentStates {\n");
    sb.append("    spaceContentStates: ").append(toIndentedString(spaceContentStates)).append("\n");
    sb.append("    customContentStates: ").append(toIndentedString(customContentStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("spaceContentStates");
    openapiFields.add("customContentStates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("spaceContentStates");
    openapiRequiredFields.add("customContentStates");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AvailableContentStates
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableContentStates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableContentStates is not found in the empty JSON string", AvailableContentStates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableContentStates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableContentStates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailableContentStates.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("spaceContentStates") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("spaceContentStates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceContentStates` to be an array in the JSON string but got `%s`", jsonObj.get("spaceContentStates").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("customContentStates") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("customContentStates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customContentStates` to be an array in the JSON string but got `%s`", jsonObj.get("customContentStates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableContentStates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableContentStates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableContentStates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableContentStates.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableContentStates>() {
           @Override
           public void write(JsonWriter out, AvailableContentStates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableContentStates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvailableContentStates given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvailableContentStates
  * @throws IOException if the JSON string is invalid with respect to AvailableContentStates
  */
  public static AvailableContentStates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableContentStates.class);
  }

 /**
  * Convert an instance of AvailableContentStates to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

