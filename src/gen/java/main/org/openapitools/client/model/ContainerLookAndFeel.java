/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerLookAndFeel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class ContainerLookAndFeel {
  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private String background;

  public static final String SERIALIZED_NAME_BACKGROUND_ATTACHMENT = "backgroundAttachment";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_ATTACHMENT)
  private String backgroundAttachment;

  public static final String SERIALIZED_NAME_BACKGROUND_BLEND_MODE = "backgroundBlendMode";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_BLEND_MODE)
  private String backgroundBlendMode;

  public static final String SERIALIZED_NAME_BACKGROUND_CLIP = "backgroundClip";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_CLIP)
  private String backgroundClip;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE = "backgroundImage";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE)
  private String backgroundImage;

  public static final String SERIALIZED_NAME_BACKGROUND_ORIGIN = "backgroundOrigin";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_ORIGIN)
  private String backgroundOrigin;

  public static final String SERIALIZED_NAME_BACKGROUND_POSITION = "backgroundPosition";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_POSITION)
  private String backgroundPosition;

  public static final String SERIALIZED_NAME_BACKGROUND_REPEAT = "backgroundRepeat";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_REPEAT)
  private String backgroundRepeat;

  public static final String SERIALIZED_NAME_BACKGROUND_SIZE = "backgroundSize";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_SIZE)
  private String backgroundSize;

  public static final String SERIALIZED_NAME_PADDING = "padding";
  @SerializedName(SERIALIZED_NAME_PADDING)
  private String padding;

  public static final String SERIALIZED_NAME_BORDER_RADIUS = "borderRadius";
  @SerializedName(SERIALIZED_NAME_BORDER_RADIUS)
  private String borderRadius;

  public ContainerLookAndFeel() {
  }

  public ContainerLookAndFeel background(String background) {
    this.background = background;
    return this;
  }

   /**
   * Get background
   * @return background
  **/
  @javax.annotation.Nonnull
  public String getBackground() {
    return background;
  }

  public void setBackground(String background) {
    this.background = background;
  }


  public ContainerLookAndFeel backgroundAttachment(String backgroundAttachment) {
    this.backgroundAttachment = backgroundAttachment;
    return this;
  }

   /**
   * Get backgroundAttachment
   * @return backgroundAttachment
  **/
  @javax.annotation.Nullable
  public String getBackgroundAttachment() {
    return backgroundAttachment;
  }

  public void setBackgroundAttachment(String backgroundAttachment) {
    this.backgroundAttachment = backgroundAttachment;
  }


  public ContainerLookAndFeel backgroundBlendMode(String backgroundBlendMode) {
    this.backgroundBlendMode = backgroundBlendMode;
    return this;
  }

   /**
   * Get backgroundBlendMode
   * @return backgroundBlendMode
  **/
  @javax.annotation.Nullable
  public String getBackgroundBlendMode() {
    return backgroundBlendMode;
  }

  public void setBackgroundBlendMode(String backgroundBlendMode) {
    this.backgroundBlendMode = backgroundBlendMode;
  }


  public ContainerLookAndFeel backgroundClip(String backgroundClip) {
    this.backgroundClip = backgroundClip;
    return this;
  }

   /**
   * Get backgroundClip
   * @return backgroundClip
  **/
  @javax.annotation.Nullable
  public String getBackgroundClip() {
    return backgroundClip;
  }

  public void setBackgroundClip(String backgroundClip) {
    this.backgroundClip = backgroundClip;
  }


  public ContainerLookAndFeel backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Get backgroundColor
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public ContainerLookAndFeel backgroundImage(String backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }

   /**
   * Get backgroundImage
   * @return backgroundImage
  **/
  @javax.annotation.Nullable
  public String getBackgroundImage() {
    return backgroundImage;
  }

  public void setBackgroundImage(String backgroundImage) {
    this.backgroundImage = backgroundImage;
  }


  public ContainerLookAndFeel backgroundOrigin(String backgroundOrigin) {
    this.backgroundOrigin = backgroundOrigin;
    return this;
  }

   /**
   * Get backgroundOrigin
   * @return backgroundOrigin
  **/
  @javax.annotation.Nullable
  public String getBackgroundOrigin() {
    return backgroundOrigin;
  }

  public void setBackgroundOrigin(String backgroundOrigin) {
    this.backgroundOrigin = backgroundOrigin;
  }


  public ContainerLookAndFeel backgroundPosition(String backgroundPosition) {
    this.backgroundPosition = backgroundPosition;
    return this;
  }

   /**
   * Get backgroundPosition
   * @return backgroundPosition
  **/
  @javax.annotation.Nullable
  public String getBackgroundPosition() {
    return backgroundPosition;
  }

  public void setBackgroundPosition(String backgroundPosition) {
    this.backgroundPosition = backgroundPosition;
  }


  public ContainerLookAndFeel backgroundRepeat(String backgroundRepeat) {
    this.backgroundRepeat = backgroundRepeat;
    return this;
  }

   /**
   * Get backgroundRepeat
   * @return backgroundRepeat
  **/
  @javax.annotation.Nullable
  public String getBackgroundRepeat() {
    return backgroundRepeat;
  }

  public void setBackgroundRepeat(String backgroundRepeat) {
    this.backgroundRepeat = backgroundRepeat;
  }


  public ContainerLookAndFeel backgroundSize(String backgroundSize) {
    this.backgroundSize = backgroundSize;
    return this;
  }

   /**
   * Get backgroundSize
   * @return backgroundSize
  **/
  @javax.annotation.Nullable
  public String getBackgroundSize() {
    return backgroundSize;
  }

  public void setBackgroundSize(String backgroundSize) {
    this.backgroundSize = backgroundSize;
  }


  public ContainerLookAndFeel padding(String padding) {
    this.padding = padding;
    return this;
  }

   /**
   * Get padding
   * @return padding
  **/
  @javax.annotation.Nonnull
  public String getPadding() {
    return padding;
  }

  public void setPadding(String padding) {
    this.padding = padding;
  }


  public ContainerLookAndFeel borderRadius(String borderRadius) {
    this.borderRadius = borderRadius;
    return this;
  }

   /**
   * Get borderRadius
   * @return borderRadius
  **/
  @javax.annotation.Nonnull
  public String getBorderRadius() {
    return borderRadius;
  }

  public void setBorderRadius(String borderRadius) {
    this.borderRadius = borderRadius;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerLookAndFeel containerLookAndFeel = (ContainerLookAndFeel) o;
    return Objects.equals(this.background, containerLookAndFeel.background) &&
        Objects.equals(this.backgroundAttachment, containerLookAndFeel.backgroundAttachment) &&
        Objects.equals(this.backgroundBlendMode, containerLookAndFeel.backgroundBlendMode) &&
        Objects.equals(this.backgroundClip, containerLookAndFeel.backgroundClip) &&
        Objects.equals(this.backgroundColor, containerLookAndFeel.backgroundColor) &&
        Objects.equals(this.backgroundImage, containerLookAndFeel.backgroundImage) &&
        Objects.equals(this.backgroundOrigin, containerLookAndFeel.backgroundOrigin) &&
        Objects.equals(this.backgroundPosition, containerLookAndFeel.backgroundPosition) &&
        Objects.equals(this.backgroundRepeat, containerLookAndFeel.backgroundRepeat) &&
        Objects.equals(this.backgroundSize, containerLookAndFeel.backgroundSize) &&
        Objects.equals(this.padding, containerLookAndFeel.padding) &&
        Objects.equals(this.borderRadius, containerLookAndFeel.borderRadius);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(background, backgroundAttachment, backgroundBlendMode, backgroundClip, backgroundColor, backgroundImage, backgroundOrigin, backgroundPosition, backgroundRepeat, backgroundSize, padding, borderRadius);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerLookAndFeel {\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    backgroundAttachment: ").append(toIndentedString(backgroundAttachment)).append("\n");
    sb.append("    backgroundBlendMode: ").append(toIndentedString(backgroundBlendMode)).append("\n");
    sb.append("    backgroundClip: ").append(toIndentedString(backgroundClip)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backgroundImage: ").append(toIndentedString(backgroundImage)).append("\n");
    sb.append("    backgroundOrigin: ").append(toIndentedString(backgroundOrigin)).append("\n");
    sb.append("    backgroundPosition: ").append(toIndentedString(backgroundPosition)).append("\n");
    sb.append("    backgroundRepeat: ").append(toIndentedString(backgroundRepeat)).append("\n");
    sb.append("    backgroundSize: ").append(toIndentedString(backgroundSize)).append("\n");
    sb.append("    padding: ").append(toIndentedString(padding)).append("\n");
    sb.append("    borderRadius: ").append(toIndentedString(borderRadius)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background");
    openapiFields.add("backgroundAttachment");
    openapiFields.add("backgroundBlendMode");
    openapiFields.add("backgroundClip");
    openapiFields.add("backgroundColor");
    openapiFields.add("backgroundImage");
    openapiFields.add("backgroundOrigin");
    openapiFields.add("backgroundPosition");
    openapiFields.add("backgroundRepeat");
    openapiFields.add("backgroundSize");
    openapiFields.add("padding");
    openapiFields.add("borderRadius");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("background");
    openapiRequiredFields.add("backgroundColor");
    openapiRequiredFields.add("backgroundImage");
    openapiRequiredFields.add("backgroundSize");
    openapiRequiredFields.add("padding");
    openapiRequiredFields.add("borderRadius");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContainerLookAndFeel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerLookAndFeel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerLookAndFeel is not found in the empty JSON string", ContainerLookAndFeel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerLookAndFeel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerLookAndFeel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainerLookAndFeel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background").toString()));
      }
      if ((jsonObj.get("backgroundAttachment") != null && !jsonObj.get("backgroundAttachment").isJsonNull()) && !jsonObj.get("backgroundAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundAttachment").toString()));
      }
      if ((jsonObj.get("backgroundBlendMode") != null && !jsonObj.get("backgroundBlendMode").isJsonNull()) && !jsonObj.get("backgroundBlendMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundBlendMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundBlendMode").toString()));
      }
      if ((jsonObj.get("backgroundClip") != null && !jsonObj.get("backgroundClip").isJsonNull()) && !jsonObj.get("backgroundClip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundClip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundClip").toString()));
      }
      if ((jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) && !jsonObj.get("backgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundColor").toString()));
      }
      if ((jsonObj.get("backgroundImage") != null && !jsonObj.get("backgroundImage").isJsonNull()) && !jsonObj.get("backgroundImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundImage").toString()));
      }
      if ((jsonObj.get("backgroundOrigin") != null && !jsonObj.get("backgroundOrigin").isJsonNull()) && !jsonObj.get("backgroundOrigin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundOrigin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundOrigin").toString()));
      }
      if ((jsonObj.get("backgroundPosition") != null && !jsonObj.get("backgroundPosition").isJsonNull()) && !jsonObj.get("backgroundPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundPosition").toString()));
      }
      if ((jsonObj.get("backgroundRepeat") != null && !jsonObj.get("backgroundRepeat").isJsonNull()) && !jsonObj.get("backgroundRepeat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundRepeat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundRepeat").toString()));
      }
      if ((jsonObj.get("backgroundSize") != null && !jsonObj.get("backgroundSize").isJsonNull()) && !jsonObj.get("backgroundSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundSize").toString()));
      }
      if (!jsonObj.get("padding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `padding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("padding").toString()));
      }
      if (!jsonObj.get("borderRadius").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `borderRadius` to be a primitive type in the JSON string but got `%s`", jsonObj.get("borderRadius").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerLookAndFeel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerLookAndFeel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerLookAndFeel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerLookAndFeel.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerLookAndFeel>() {
           @Override
           public void write(JsonWriter out, ContainerLookAndFeel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerLookAndFeel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContainerLookAndFeel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContainerLookAndFeel
  * @throws IOException if the JSON string is invalid with respect to ContainerLookAndFeel
  */
  public static ContainerLookAndFeel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerLookAndFeel.class);
  }

 /**
  * Convert an instance of ContainerLookAndFeel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

