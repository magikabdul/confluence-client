/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContentArray;
import org.openapitools.client.model.GenericLinksValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetContentForSpace200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class GetContentForSpace200Response {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private ContentArray page;

  public static final String SERIALIZED_NAME_BLOGPOST = "blogpost";
  @SerializedName(SERIALIZED_NAME_BLOGPOST)
  private ContentArray blogpost;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, GenericLinksValue> links = new HashMap<>();

  public GetContentForSpace200Response() {
  }

  public GetContentForSpace200Response page(ContentArray page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  public ContentArray getPage() {
    return page;
  }

  public void setPage(ContentArray page) {
    this.page = page;
  }


  public GetContentForSpace200Response blogpost(ContentArray blogpost) {
    this.blogpost = blogpost;
    return this;
  }

   /**
   * Get blogpost
   * @return blogpost
  **/
  @javax.annotation.Nullable
  public ContentArray getBlogpost() {
    return blogpost;
  }

  public void setBlogpost(ContentArray blogpost) {
    this.blogpost = blogpost;
  }


  public GetContentForSpace200Response links(Map<String, GenericLinksValue> links) {
    this.links = links;
    return this;
  }

  public GetContentForSpace200Response putLinksItem(String key, GenericLinksValue linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public Map<String, GenericLinksValue> getLinks() {
    return links;
  }

  public void setLinks(Map<String, GenericLinksValue> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContentForSpace200Response getContentForSpace200Response = (GetContentForSpace200Response) o;
    return Objects.equals(this.page, getContentForSpace200Response.page) &&
        Objects.equals(this.blogpost, getContentForSpace200Response.blogpost) &&
        Objects.equals(this.links, getContentForSpace200Response.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, blogpost, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContentForSpace200Response {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    blogpost: ").append(toIndentedString(blogpost)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("page");
    openapiFields.add("blogpost");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetContentForSpace200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetContentForSpace200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetContentForSpace200Response is not found in the empty JSON string", GetContentForSpace200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetContentForSpace200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetContentForSpace200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `page`
      if (jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) {
        ContentArray.validateJsonElement(jsonObj.get("page"));
      }
      // validate the optional field `blogpost`
      if (jsonObj.get("blogpost") != null && !jsonObj.get("blogpost").isJsonNull()) {
        ContentArray.validateJsonElement(jsonObj.get("blogpost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetContentForSpace200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetContentForSpace200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetContentForSpace200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetContentForSpace200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetContentForSpace200Response>() {
           @Override
           public void write(JsonWriter out, GetContentForSpace200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetContentForSpace200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetContentForSpace200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetContentForSpace200Response
  * @throws IOException if the JSON string is invalid with respect to GetContentForSpace200Response
  */
  public static GetContentForSpace200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetContentForSpace200Response.class);
  }

 /**
  * Convert an instance of GetContentForSpace200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

