/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentExpandable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class ContentExpandable {
  public static final String SERIALIZED_NAME_CHILD_TYPES = "childTypes";
  @SerializedName(SERIALIZED_NAME_CHILD_TYPES)
  private String childTypes;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private String operations;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private String children;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private String restrictions;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private String history;

  public static final String SERIALIZED_NAME_ANCESTORS = "ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private String ancestors;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DESCENDANTS = "descendants";
  @SerializedName(SERIALIZED_NAME_DESCENDANTS)
  private String descendants;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  private String space;

  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private String extensions;

  public static final String SERIALIZED_NAME_SCHEDULE_PUBLISH_DATE = "schedulePublishDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_PUBLISH_DATE)
  private String schedulePublishDate;

  public static final String SERIALIZED_NAME_SCHEDULE_PUBLISH_INFO = "schedulePublishInfo";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_PUBLISH_INFO)
  private String schedulePublishInfo;

  public static final String SERIALIZED_NAME_MACRO_RENDERED_OUTPUT = "macroRenderedOutput";
  @SerializedName(SERIALIZED_NAME_MACRO_RENDERED_OUTPUT)
  private String macroRenderedOutput;

  public ContentExpandable() {
  }

  public ContentExpandable childTypes(String childTypes) {
    this.childTypes = childTypes;
    return this;
  }

   /**
   * Get childTypes
   * @return childTypes
  **/
  @javax.annotation.Nullable
  public String getChildTypes() {
    return childTypes;
  }

  public void setChildTypes(String childTypes) {
    this.childTypes = childTypes;
  }


  public ContentExpandable container(String container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public ContentExpandable metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public ContentExpandable operations(String operations) {
    this.operations = operations;
    return this;
  }

   /**
   * Get operations
   * @return operations
  **/
  @javax.annotation.Nullable
  public String getOperations() {
    return operations;
  }

  public void setOperations(String operations) {
    this.operations = operations;
  }


  public ContentExpandable children(String children) {
    this.children = children;
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  public String getChildren() {
    return children;
  }

  public void setChildren(String children) {
    this.children = children;
  }


  public ContentExpandable restrictions(String restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @javax.annotation.Nullable
  public String getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(String restrictions) {
    this.restrictions = restrictions;
  }


  public ContentExpandable history(String history) {
    this.history = history;
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @javax.annotation.Nullable
  public String getHistory() {
    return history;
  }

  public void setHistory(String history) {
    this.history = history;
  }


  public ContentExpandable ancestors(String ancestors) {
    this.ancestors = ancestors;
    return this;
  }

   /**
   * Get ancestors
   * @return ancestors
  **/
  @javax.annotation.Nullable
  public String getAncestors() {
    return ancestors;
  }

  public void setAncestors(String ancestors) {
    this.ancestors = ancestors;
  }


  public ContentExpandable body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public ContentExpandable version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public ContentExpandable descendants(String descendants) {
    this.descendants = descendants;
    return this;
  }

   /**
   * Get descendants
   * @return descendants
  **/
  @javax.annotation.Nullable
  public String getDescendants() {
    return descendants;
  }

  public void setDescendants(String descendants) {
    this.descendants = descendants;
  }


  public ContentExpandable space(String space) {
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @javax.annotation.Nullable
  public String getSpace() {
    return space;
  }

  public void setSpace(String space) {
    this.space = space;
  }


  public ContentExpandable extensions(String extensions) {
    this.extensions = extensions;
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @javax.annotation.Nullable
  public String getExtensions() {
    return extensions;
  }

  public void setExtensions(String extensions) {
    this.extensions = extensions;
  }


  public ContentExpandable schedulePublishDate(String schedulePublishDate) {
    this.schedulePublishDate = schedulePublishDate;
    return this;
  }

   /**
   * Get schedulePublishDate
   * @return schedulePublishDate
  **/
  @javax.annotation.Nullable
  public String getSchedulePublishDate() {
    return schedulePublishDate;
  }

  public void setSchedulePublishDate(String schedulePublishDate) {
    this.schedulePublishDate = schedulePublishDate;
  }


  public ContentExpandable schedulePublishInfo(String schedulePublishInfo) {
    this.schedulePublishInfo = schedulePublishInfo;
    return this;
  }

   /**
   * Get schedulePublishInfo
   * @return schedulePublishInfo
  **/
  @javax.annotation.Nullable
  public String getSchedulePublishInfo() {
    return schedulePublishInfo;
  }

  public void setSchedulePublishInfo(String schedulePublishInfo) {
    this.schedulePublishInfo = schedulePublishInfo;
  }


  public ContentExpandable macroRenderedOutput(String macroRenderedOutput) {
    this.macroRenderedOutput = macroRenderedOutput;
    return this;
  }

   /**
   * Get macroRenderedOutput
   * @return macroRenderedOutput
  **/
  @javax.annotation.Nullable
  public String getMacroRenderedOutput() {
    return macroRenderedOutput;
  }

  public void setMacroRenderedOutput(String macroRenderedOutput) {
    this.macroRenderedOutput = macroRenderedOutput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentExpandable contentExpandable = (ContentExpandable) o;
    return Objects.equals(this.childTypes, contentExpandable.childTypes) &&
        Objects.equals(this.container, contentExpandable.container) &&
        Objects.equals(this.metadata, contentExpandable.metadata) &&
        Objects.equals(this.operations, contentExpandable.operations) &&
        Objects.equals(this.children, contentExpandable.children) &&
        Objects.equals(this.restrictions, contentExpandable.restrictions) &&
        Objects.equals(this.history, contentExpandable.history) &&
        Objects.equals(this.ancestors, contentExpandable.ancestors) &&
        Objects.equals(this.body, contentExpandable.body) &&
        Objects.equals(this.version, contentExpandable.version) &&
        Objects.equals(this.descendants, contentExpandable.descendants) &&
        Objects.equals(this.space, contentExpandable.space) &&
        Objects.equals(this.extensions, contentExpandable.extensions) &&
        Objects.equals(this.schedulePublishDate, contentExpandable.schedulePublishDate) &&
        Objects.equals(this.schedulePublishInfo, contentExpandable.schedulePublishInfo) &&
        Objects.equals(this.macroRenderedOutput, contentExpandable.macroRenderedOutput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childTypes, container, metadata, operations, children, restrictions, history, ancestors, body, version, descendants, space, extensions, schedulePublishDate, schedulePublishInfo, macroRenderedOutput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentExpandable {\n");
    sb.append("    childTypes: ").append(toIndentedString(childTypes)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    descendants: ").append(toIndentedString(descendants)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    schedulePublishDate: ").append(toIndentedString(schedulePublishDate)).append("\n");
    sb.append("    schedulePublishInfo: ").append(toIndentedString(schedulePublishInfo)).append("\n");
    sb.append("    macroRenderedOutput: ").append(toIndentedString(macroRenderedOutput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childTypes");
    openapiFields.add("container");
    openapiFields.add("metadata");
    openapiFields.add("operations");
    openapiFields.add("children");
    openapiFields.add("restrictions");
    openapiFields.add("history");
    openapiFields.add("ancestors");
    openapiFields.add("body");
    openapiFields.add("version");
    openapiFields.add("descendants");
    openapiFields.add("space");
    openapiFields.add("extensions");
    openapiFields.add("schedulePublishDate");
    openapiFields.add("schedulePublishInfo");
    openapiFields.add("macroRenderedOutput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentExpandable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentExpandable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentExpandable is not found in the empty JSON string", ContentExpandable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentExpandable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentExpandable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("childTypes") != null && !jsonObj.get("childTypes").isJsonNull()) && !jsonObj.get("childTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `childTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("childTypes").toString()));
      }
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull()) && !jsonObj.get("operations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operations").toString()));
      }
      if ((jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) && !jsonObj.get("children").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `children` to be a primitive type in the JSON string but got `%s`", jsonObj.get("children").toString()));
      }
      if ((jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) && !jsonObj.get("restrictions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restrictions").toString()));
      }
      if ((jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull()) && !jsonObj.get("history").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `history` to be a primitive type in the JSON string but got `%s`", jsonObj.get("history").toString()));
      }
      if ((jsonObj.get("ancestors") != null && !jsonObj.get("ancestors").isJsonNull()) && !jsonObj.get("ancestors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ancestors").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("descendants") != null && !jsonObj.get("descendants").isJsonNull()) && !jsonObj.get("descendants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descendants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descendants").toString()));
      }
      if ((jsonObj.get("space") != null && !jsonObj.get("space").isJsonNull()) && !jsonObj.get("space").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `space` to be a primitive type in the JSON string but got `%s`", jsonObj.get("space").toString()));
      }
      if ((jsonObj.get("extensions") != null && !jsonObj.get("extensions").isJsonNull()) && !jsonObj.get("extensions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extensions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extensions").toString()));
      }
      if ((jsonObj.get("schedulePublishDate") != null && !jsonObj.get("schedulePublishDate").isJsonNull()) && !jsonObj.get("schedulePublishDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedulePublishDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedulePublishDate").toString()));
      }
      if ((jsonObj.get("schedulePublishInfo") != null && !jsonObj.get("schedulePublishInfo").isJsonNull()) && !jsonObj.get("schedulePublishInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedulePublishInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedulePublishInfo").toString()));
      }
      if ((jsonObj.get("macroRenderedOutput") != null && !jsonObj.get("macroRenderedOutput").isJsonNull()) && !jsonObj.get("macroRenderedOutput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macroRenderedOutput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macroRenderedOutput").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentExpandable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentExpandable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentExpandable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentExpandable.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentExpandable>() {
           @Override
           public void write(JsonWriter out, ContentExpandable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentExpandable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentExpandable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentExpandable
  * @throws IOException if the JSON string is invalid with respect to ContentExpandable
  */
  public static ContentExpandable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentExpandable.class);
  }

 /**
  * Convert an instance of ContentExpandable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

