/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SystemInfoEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class SystemInfoEntity {
  public static final String SERIALIZED_NAME_CLOUD_ID = "cloudId";
  @SerializedName(SERIALIZED_NAME_CLOUD_ID)
  private String cloudId;

  public static final String SERIALIZED_NAME_COMMIT_HASH = "commitHash";
  @SerializedName(SERIALIZED_NAME_COMMIT_HASH)
  private String commitHash;

  public static final String SERIALIZED_NAME_BASE_URL = "baseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_EDITION = "edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private String edition;

  public static final String SERIALIZED_NAME_SITE_TITLE = "siteTitle";
  @SerializedName(SERIALIZED_NAME_SITE_TITLE)
  private String siteTitle;

  public static final String SERIALIZED_NAME_DEFAULT_LOCALE = "defaultLocale";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOCALE)
  private String defaultLocale;

  public static final String SERIALIZED_NAME_DEFAULT_TIME_ZONE = "defaultTimeZone";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TIME_ZONE)
  private String defaultTimeZone;

  public static final String SERIALIZED_NAME_MICROS_PERIMETER = "microsPerimeter";
  @SerializedName(SERIALIZED_NAME_MICROS_PERIMETER)
  private String microsPerimeter;

  public SystemInfoEntity() {
  }

  public SystemInfoEntity cloudId(String cloudId) {
    this.cloudId = cloudId;
    return this;
  }

   /**
   * Get cloudId
   * @return cloudId
  **/
  @javax.annotation.Nonnull
  public String getCloudId() {
    return cloudId;
  }

  public void setCloudId(String cloudId) {
    this.cloudId = cloudId;
  }


  public SystemInfoEntity commitHash(String commitHash) {
    this.commitHash = commitHash;
    return this;
  }

   /**
   * Get commitHash
   * @return commitHash
  **/
  @javax.annotation.Nonnull
  public String getCommitHash() {
    return commitHash;
  }

  public void setCommitHash(String commitHash) {
    this.commitHash = commitHash;
  }


  public SystemInfoEntity baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

   /**
   * Get baseUrl
   * @return baseUrl
  **/
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public SystemInfoEntity edition(String edition) {
    this.edition = edition;
    return this;
  }

   /**
   * Get edition
   * @return edition
  **/
  @javax.annotation.Nullable
  public String getEdition() {
    return edition;
  }

  public void setEdition(String edition) {
    this.edition = edition;
  }


  public SystemInfoEntity siteTitle(String siteTitle) {
    this.siteTitle = siteTitle;
    return this;
  }

   /**
   * Get siteTitle
   * @return siteTitle
  **/
  @javax.annotation.Nullable
  public String getSiteTitle() {
    return siteTitle;
  }

  public void setSiteTitle(String siteTitle) {
    this.siteTitle = siteTitle;
  }


  public SystemInfoEntity defaultLocale(String defaultLocale) {
    this.defaultLocale = defaultLocale;
    return this;
  }

   /**
   * Get defaultLocale
   * @return defaultLocale
  **/
  @javax.annotation.Nullable
  public String getDefaultLocale() {
    return defaultLocale;
  }

  public void setDefaultLocale(String defaultLocale) {
    this.defaultLocale = defaultLocale;
  }


  public SystemInfoEntity defaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
    return this;
  }

   /**
   * Get defaultTimeZone
   * @return defaultTimeZone
  **/
  @javax.annotation.Nullable
  public String getDefaultTimeZone() {
    return defaultTimeZone;
  }

  public void setDefaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
  }


  public SystemInfoEntity microsPerimeter(String microsPerimeter) {
    this.microsPerimeter = microsPerimeter;
    return this;
  }

   /**
   * Get microsPerimeter
   * @return microsPerimeter
  **/
  @javax.annotation.Nullable
  public String getMicrosPerimeter() {
    return microsPerimeter;
  }

  public void setMicrosPerimeter(String microsPerimeter) {
    this.microsPerimeter = microsPerimeter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfoEntity systemInfoEntity = (SystemInfoEntity) o;
    return Objects.equals(this.cloudId, systemInfoEntity.cloudId) &&
        Objects.equals(this.commitHash, systemInfoEntity.commitHash) &&
        Objects.equals(this.baseUrl, systemInfoEntity.baseUrl) &&
        Objects.equals(this.edition, systemInfoEntity.edition) &&
        Objects.equals(this.siteTitle, systemInfoEntity.siteTitle) &&
        Objects.equals(this.defaultLocale, systemInfoEntity.defaultLocale) &&
        Objects.equals(this.defaultTimeZone, systemInfoEntity.defaultTimeZone) &&
        Objects.equals(this.microsPerimeter, systemInfoEntity.microsPerimeter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudId, commitHash, baseUrl, edition, siteTitle, defaultLocale, defaultTimeZone, microsPerimeter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfoEntity {\n");
    sb.append("    cloudId: ").append(toIndentedString(cloudId)).append("\n");
    sb.append("    commitHash: ").append(toIndentedString(commitHash)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    siteTitle: ").append(toIndentedString(siteTitle)).append("\n");
    sb.append("    defaultLocale: ").append(toIndentedString(defaultLocale)).append("\n");
    sb.append("    defaultTimeZone: ").append(toIndentedString(defaultTimeZone)).append("\n");
    sb.append("    microsPerimeter: ").append(toIndentedString(microsPerimeter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudId");
    openapiFields.add("commitHash");
    openapiFields.add("baseUrl");
    openapiFields.add("edition");
    openapiFields.add("siteTitle");
    openapiFields.add("defaultLocale");
    openapiFields.add("defaultTimeZone");
    openapiFields.add("microsPerimeter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cloudId");
    openapiRequiredFields.add("commitHash");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SystemInfoEntity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemInfoEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemInfoEntity is not found in the empty JSON string", SystemInfoEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemInfoEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemInfoEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SystemInfoEntity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cloudId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudId").toString()));
      }
      if (!jsonObj.get("commitHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitHash").toString()));
      }
      if ((jsonObj.get("baseUrl") != null && !jsonObj.get("baseUrl").isJsonNull()) && !jsonObj.get("baseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseUrl").toString()));
      }
      if ((jsonObj.get("edition") != null && !jsonObj.get("edition").isJsonNull()) && !jsonObj.get("edition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edition").toString()));
      }
      if ((jsonObj.get("siteTitle") != null && !jsonObj.get("siteTitle").isJsonNull()) && !jsonObj.get("siteTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteTitle").toString()));
      }
      if ((jsonObj.get("defaultLocale") != null && !jsonObj.get("defaultLocale").isJsonNull()) && !jsonObj.get("defaultLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLocale").toString()));
      }
      if ((jsonObj.get("defaultTimeZone") != null && !jsonObj.get("defaultTimeZone").isJsonNull()) && !jsonObj.get("defaultTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultTimeZone").toString()));
      }
      if ((jsonObj.get("microsPerimeter") != null && !jsonObj.get("microsPerimeter").isJsonNull()) && !jsonObj.get("microsPerimeter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsPerimeter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microsPerimeter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemInfoEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemInfoEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemInfoEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemInfoEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemInfoEntity>() {
           @Override
           public void write(JsonWriter out, SystemInfoEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemInfoEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SystemInfoEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SystemInfoEntity
  * @throws IOException if the JSON string is invalid with respect to SystemInfoEntity
  */
  public static SystemInfoEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemInfoEntity.class);
  }

 /**
  * Convert an instance of SystemInfoEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

