/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AffectedObject;
import org.openapitools.client.model.AuditRecordAuthor;
import org.openapitools.client.model.ChangedValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuditRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class AuditRecord {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private AuditRecordAuthor author;

  public static final String SERIALIZED_NAME_REMOTE_ADDRESS = "remoteAddress";
  @SerializedName(SERIALIZED_NAME_REMOTE_ADDRESS)
  private String remoteAddress;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Long creationDate;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_SYS_ADMIN = "sysAdmin";
  @SerializedName(SERIALIZED_NAME_SYS_ADMIN)
  private Boolean sysAdmin;

  public static final String SERIALIZED_NAME_SUPER_ADMIN = "superAdmin";
  @SerializedName(SERIALIZED_NAME_SUPER_ADMIN)
  private Boolean superAdmin;

  public static final String SERIALIZED_NAME_AFFECTED_OBJECT = "affectedObject";
  @SerializedName(SERIALIZED_NAME_AFFECTED_OBJECT)
  private AffectedObject affectedObject;

  public static final String SERIALIZED_NAME_CHANGED_VALUES = "changedValues";
  @SerializedName(SERIALIZED_NAME_CHANGED_VALUES)
  private List<ChangedValue> changedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_OBJECTS = "associatedObjects";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_OBJECTS)
  private List<AffectedObject> associatedObjects = new ArrayList<>();

  public AuditRecord() {
  }

  public AuditRecord author(AuditRecordAuthor author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nonnull
  public AuditRecordAuthor getAuthor() {
    return author;
  }

  public void setAuthor(AuditRecordAuthor author) {
    this.author = author;
  }


  public AuditRecord remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

   /**
   * Get remoteAddress
   * @return remoteAddress
  **/
  @javax.annotation.Nonnull
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }


  public AuditRecord creationDate(Long creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * The creation date-time of the audit record, as a timestamp.
   * @return creationDate
  **/
  @javax.annotation.Nonnull
  public Long getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Long creationDate) {
    this.creationDate = creationDate;
  }


  public AuditRecord summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public AuditRecord description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AuditRecord category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nonnull
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public AuditRecord sysAdmin(Boolean sysAdmin) {
    this.sysAdmin = sysAdmin;
    return this;
  }

   /**
   * Get sysAdmin
   * @return sysAdmin
  **/
  @javax.annotation.Nonnull
  public Boolean getSysAdmin() {
    return sysAdmin;
  }

  public void setSysAdmin(Boolean sysAdmin) {
    this.sysAdmin = sysAdmin;
  }


  public AuditRecord superAdmin(Boolean superAdmin) {
    this.superAdmin = superAdmin;
    return this;
  }

   /**
   * Get superAdmin
   * @return superAdmin
  **/
  @javax.annotation.Nullable
  public Boolean getSuperAdmin() {
    return superAdmin;
  }

  public void setSuperAdmin(Boolean superAdmin) {
    this.superAdmin = superAdmin;
  }


  public AuditRecord affectedObject(AffectedObject affectedObject) {
    this.affectedObject = affectedObject;
    return this;
  }

   /**
   * Get affectedObject
   * @return affectedObject
  **/
  @javax.annotation.Nonnull
  public AffectedObject getAffectedObject() {
    return affectedObject;
  }

  public void setAffectedObject(AffectedObject affectedObject) {
    this.affectedObject = affectedObject;
  }


  public AuditRecord changedValues(List<ChangedValue> changedValues) {
    this.changedValues = changedValues;
    return this;
  }

  public AuditRecord addChangedValuesItem(ChangedValue changedValuesItem) {
    if (this.changedValues == null) {
      this.changedValues = new ArrayList<>();
    }
    this.changedValues.add(changedValuesItem);
    return this;
  }

   /**
   * Get changedValues
   * @return changedValues
  **/
  @javax.annotation.Nonnull
  public List<ChangedValue> getChangedValues() {
    return changedValues;
  }

  public void setChangedValues(List<ChangedValue> changedValues) {
    this.changedValues = changedValues;
  }


  public AuditRecord associatedObjects(List<AffectedObject> associatedObjects) {
    this.associatedObjects = associatedObjects;
    return this;
  }

  public AuditRecord addAssociatedObjectsItem(AffectedObject associatedObjectsItem) {
    if (this.associatedObjects == null) {
      this.associatedObjects = new ArrayList<>();
    }
    this.associatedObjects.add(associatedObjectsItem);
    return this;
  }

   /**
   * Get associatedObjects
   * @return associatedObjects
  **/
  @javax.annotation.Nonnull
  public List<AffectedObject> getAssociatedObjects() {
    return associatedObjects;
  }

  public void setAssociatedObjects(List<AffectedObject> associatedObjects) {
    this.associatedObjects = associatedObjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditRecord auditRecord = (AuditRecord) o;
    return Objects.equals(this.author, auditRecord.author) &&
        Objects.equals(this.remoteAddress, auditRecord.remoteAddress) &&
        Objects.equals(this.creationDate, auditRecord.creationDate) &&
        Objects.equals(this.summary, auditRecord.summary) &&
        Objects.equals(this.description, auditRecord.description) &&
        Objects.equals(this.category, auditRecord.category) &&
        Objects.equals(this.sysAdmin, auditRecord.sysAdmin) &&
        Objects.equals(this.superAdmin, auditRecord.superAdmin) &&
        Objects.equals(this.affectedObject, auditRecord.affectedObject) &&
        Objects.equals(this.changedValues, auditRecord.changedValues) &&
        Objects.equals(this.associatedObjects, auditRecord.associatedObjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, remoteAddress, creationDate, summary, description, category, sysAdmin, superAdmin, affectedObject, changedValues, associatedObjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditRecord {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    sysAdmin: ").append(toIndentedString(sysAdmin)).append("\n");
    sb.append("    superAdmin: ").append(toIndentedString(superAdmin)).append("\n");
    sb.append("    affectedObject: ").append(toIndentedString(affectedObject)).append("\n");
    sb.append("    changedValues: ").append(toIndentedString(changedValues)).append("\n");
    sb.append("    associatedObjects: ").append(toIndentedString(associatedObjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("remoteAddress");
    openapiFields.add("creationDate");
    openapiFields.add("summary");
    openapiFields.add("description");
    openapiFields.add("category");
    openapiFields.add("sysAdmin");
    openapiFields.add("superAdmin");
    openapiFields.add("affectedObject");
    openapiFields.add("changedValues");
    openapiFields.add("associatedObjects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("author");
    openapiRequiredFields.add("remoteAddress");
    openapiRequiredFields.add("creationDate");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("sysAdmin");
    openapiRequiredFields.add("affectedObject");
    openapiRequiredFields.add("changedValues");
    openapiRequiredFields.add("associatedObjects");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuditRecord
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditRecord is not found in the empty JSON string", AuditRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuditRecord.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `author`
      AuditRecordAuthor.validateJsonElement(jsonObj.get("author"));
      if (!jsonObj.get("remoteAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteAddress").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `affectedObject`
      AffectedObject.validateJsonElement(jsonObj.get("affectedObject"));
      // ensure the json data is an array
      if (!jsonObj.get("changedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changedValues` to be an array in the JSON string but got `%s`", jsonObj.get("changedValues").toString()));
      }

      JsonArray jsonArraychangedValues = jsonObj.getAsJsonArray("changedValues");
      // validate the required field `changedValues` (array)
      for (int i = 0; i < jsonArraychangedValues.size(); i++) {
        ChangedValue.validateJsonElement(jsonArraychangedValues.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("associatedObjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedObjects` to be an array in the JSON string but got `%s`", jsonObj.get("associatedObjects").toString()));
      }

      JsonArray jsonArrayassociatedObjects = jsonObj.getAsJsonArray("associatedObjects");
      // validate the required field `associatedObjects` (array)
      for (int i = 0; i < jsonArrayassociatedObjects.size(); i++) {
        AffectedObject.validateJsonElement(jsonArrayassociatedObjects.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditRecord>() {
           @Override
           public void write(JsonWriter out, AuditRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuditRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuditRecord
  * @throws IOException if the JSON string is invalid with respect to AuditRecord
  */
  public static AuditRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditRecord.class);
  }

 /**
  * Convert an instance of AuditRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

