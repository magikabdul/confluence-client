/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContentMetadataCurrentuserExpandable;
import org.openapitools.client.model.ContentMetadataCurrentuserFavourited;
import org.openapitools.client.model.ContentMetadataCurrentuserLastcontributed;
import org.openapitools.client.model.ContentMetadataCurrentuserLastmodified;
import org.openapitools.client.model.ContentMetadataCurrentuserViewed;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentMetadataCurrentuser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class ContentMetadataCurrentuser {
  public static final String SERIALIZED_NAME_FAVOURITED = "favourited";
  @SerializedName(SERIALIZED_NAME_FAVOURITED)
  private ContentMetadataCurrentuserFavourited favourited;

  public static final String SERIALIZED_NAME_LASTMODIFIED = "lastmodified";
  @SerializedName(SERIALIZED_NAME_LASTMODIFIED)
  private ContentMetadataCurrentuserLastmodified lastmodified;

  public static final String SERIALIZED_NAME_LASTCONTRIBUTED = "lastcontributed";
  @SerializedName(SERIALIZED_NAME_LASTCONTRIBUTED)
  private ContentMetadataCurrentuserLastcontributed lastcontributed;

  public static final String SERIALIZED_NAME_VIEWED = "viewed";
  @SerializedName(SERIALIZED_NAME_VIEWED)
  private ContentMetadataCurrentuserViewed viewed;

  public static final String SERIALIZED_NAME_SCHEDULED = "scheduled";
  @SerializedName(SERIALIZED_NAME_SCHEDULED)
  private Object scheduled;

  public static final String SERIALIZED_NAME_EXPANDABLE = "_expandable";
  @SerializedName(SERIALIZED_NAME_EXPANDABLE)
  private ContentMetadataCurrentuserExpandable expandable;

  public ContentMetadataCurrentuser() {
  }

  public ContentMetadataCurrentuser favourited(ContentMetadataCurrentuserFavourited favourited) {
    this.favourited = favourited;
    return this;
  }

   /**
   * Get favourited
   * @return favourited
  **/
  @javax.annotation.Nullable
  public ContentMetadataCurrentuserFavourited getFavourited() {
    return favourited;
  }

  public void setFavourited(ContentMetadataCurrentuserFavourited favourited) {
    this.favourited = favourited;
  }


  public ContentMetadataCurrentuser lastmodified(ContentMetadataCurrentuserLastmodified lastmodified) {
    this.lastmodified = lastmodified;
    return this;
  }

   /**
   * Get lastmodified
   * @return lastmodified
  **/
  @javax.annotation.Nullable
  public ContentMetadataCurrentuserLastmodified getLastmodified() {
    return lastmodified;
  }

  public void setLastmodified(ContentMetadataCurrentuserLastmodified lastmodified) {
    this.lastmodified = lastmodified;
  }


  public ContentMetadataCurrentuser lastcontributed(ContentMetadataCurrentuserLastcontributed lastcontributed) {
    this.lastcontributed = lastcontributed;
    return this;
  }

   /**
   * Get lastcontributed
   * @return lastcontributed
  **/
  @javax.annotation.Nullable
  public ContentMetadataCurrentuserLastcontributed getLastcontributed() {
    return lastcontributed;
  }

  public void setLastcontributed(ContentMetadataCurrentuserLastcontributed lastcontributed) {
    this.lastcontributed = lastcontributed;
  }


  public ContentMetadataCurrentuser viewed(ContentMetadataCurrentuserViewed viewed) {
    this.viewed = viewed;
    return this;
  }

   /**
   * Get viewed
   * @return viewed
  **/
  @javax.annotation.Nullable
  public ContentMetadataCurrentuserViewed getViewed() {
    return viewed;
  }

  public void setViewed(ContentMetadataCurrentuserViewed viewed) {
    this.viewed = viewed;
  }


  public ContentMetadataCurrentuser scheduled(Object scheduled) {
    this.scheduled = scheduled;
    return this;
  }

   /**
   * Get scheduled
   * @return scheduled
  **/
  @javax.annotation.Nullable
  public Object getScheduled() {
    return scheduled;
  }

  public void setScheduled(Object scheduled) {
    this.scheduled = scheduled;
  }


  public ContentMetadataCurrentuser expandable(ContentMetadataCurrentuserExpandable expandable) {
    this.expandable = expandable;
    return this;
  }

   /**
   * Get expandable
   * @return expandable
  **/
  @javax.annotation.Nullable
  public ContentMetadataCurrentuserExpandable getExpandable() {
    return expandable;
  }

  public void setExpandable(ContentMetadataCurrentuserExpandable expandable) {
    this.expandable = expandable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentMetadataCurrentuser contentMetadataCurrentuser = (ContentMetadataCurrentuser) o;
    return Objects.equals(this.favourited, contentMetadataCurrentuser.favourited) &&
        Objects.equals(this.lastmodified, contentMetadataCurrentuser.lastmodified) &&
        Objects.equals(this.lastcontributed, contentMetadataCurrentuser.lastcontributed) &&
        Objects.equals(this.viewed, contentMetadataCurrentuser.viewed) &&
        Objects.equals(this.scheduled, contentMetadataCurrentuser.scheduled) &&
        Objects.equals(this.expandable, contentMetadataCurrentuser.expandable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(favourited, lastmodified, lastcontributed, viewed, scheduled, expandable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentMetadataCurrentuser {\n");
    sb.append("    favourited: ").append(toIndentedString(favourited)).append("\n");
    sb.append("    lastmodified: ").append(toIndentedString(lastmodified)).append("\n");
    sb.append("    lastcontributed: ").append(toIndentedString(lastcontributed)).append("\n");
    sb.append("    viewed: ").append(toIndentedString(viewed)).append("\n");
    sb.append("    scheduled: ").append(toIndentedString(scheduled)).append("\n");
    sb.append("    expandable: ").append(toIndentedString(expandable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("favourited");
    openapiFields.add("lastmodified");
    openapiFields.add("lastcontributed");
    openapiFields.add("viewed");
    openapiFields.add("scheduled");
    openapiFields.add("_expandable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentMetadataCurrentuser
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentMetadataCurrentuser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentMetadataCurrentuser is not found in the empty JSON string", ContentMetadataCurrentuser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentMetadataCurrentuser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentMetadataCurrentuser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `favourited`
      if (jsonObj.get("favourited") != null && !jsonObj.get("favourited").isJsonNull()) {
        ContentMetadataCurrentuserFavourited.validateJsonElement(jsonObj.get("favourited"));
      }
      // validate the optional field `lastmodified`
      if (jsonObj.get("lastmodified") != null && !jsonObj.get("lastmodified").isJsonNull()) {
        ContentMetadataCurrentuserLastmodified.validateJsonElement(jsonObj.get("lastmodified"));
      }
      // validate the optional field `lastcontributed`
      if (jsonObj.get("lastcontributed") != null && !jsonObj.get("lastcontributed").isJsonNull()) {
        ContentMetadataCurrentuserLastcontributed.validateJsonElement(jsonObj.get("lastcontributed"));
      }
      // validate the optional field `viewed`
      if (jsonObj.get("viewed") != null && !jsonObj.get("viewed").isJsonNull()) {
        ContentMetadataCurrentuserViewed.validateJsonElement(jsonObj.get("viewed"));
      }
      // validate the optional field `_expandable`
      if (jsonObj.get("_expandable") != null && !jsonObj.get("_expandable").isJsonNull()) {
        ContentMetadataCurrentuserExpandable.validateJsonElement(jsonObj.get("_expandable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentMetadataCurrentuser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentMetadataCurrentuser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentMetadataCurrentuser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentMetadataCurrentuser.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentMetadataCurrentuser>() {
           @Override
           public void write(JsonWriter out, ContentMetadataCurrentuser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentMetadataCurrentuser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentMetadataCurrentuser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentMetadataCurrentuser
  * @throws IOException if the JSON string is invalid with respect to ContentMetadataCurrentuser
  */
  public static ContentMetadataCurrentuser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentMetadataCurrentuser.class);
  }

 /**
  * Convert an instance of ContentMetadataCurrentuser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

