/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Breadcrumb;
import org.openapitools.client.model.ContainerSummary;
import org.openapitools.client.model.Content;
import org.openapitools.client.model.Space;
import org.openapitools.client.model.User;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class SearchResult {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private Content content;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  private Space space;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_EXCERPT = "excerpt";
  @SerializedName(SERIALIZED_NAME_EXCERPT)
  private String excerpt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_RESULT_PARENT_CONTAINER = "resultParentContainer";
  @SerializedName(SERIALIZED_NAME_RESULT_PARENT_CONTAINER)
  private ContainerSummary resultParentContainer;

  public static final String SERIALIZED_NAME_RESULT_GLOBAL_CONTAINER = "resultGlobalContainer";
  @SerializedName(SERIALIZED_NAME_RESULT_GLOBAL_CONTAINER)
  private ContainerSummary resultGlobalContainer;

  public static final String SERIALIZED_NAME_BREADCRUMBS = "breadcrumbs";
  @SerializedName(SERIALIZED_NAME_BREADCRUMBS)
  private List<Breadcrumb> breadcrumbs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_ICON_CSS_CLASS = "iconCssClass";
  @SerializedName(SERIALIZED_NAME_ICON_CSS_CLASS)
  private String iconCssClass;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_FRIENDLY_LAST_MODIFIED = "friendlyLastModified";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_LAST_MODIFIED)
  private String friendlyLastModified;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public SearchResult() {
  }

  public SearchResult content(Content content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  public Content getContent() {
    return content;
  }

  public void setContent(Content content) {
    this.content = content;
  }


  public SearchResult user(User user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  public SearchResult space(Space space) {
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @javax.annotation.Nullable
  public Space getSpace() {
    return space;
  }

  public void setSpace(Space space) {
    this.space = space;
  }


  public SearchResult title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SearchResult excerpt(String excerpt) {
    this.excerpt = excerpt;
    return this;
  }

   /**
   * Get excerpt
   * @return excerpt
  **/
  @javax.annotation.Nonnull
  public String getExcerpt() {
    return excerpt;
  }

  public void setExcerpt(String excerpt) {
    this.excerpt = excerpt;
  }


  public SearchResult url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public SearchResult resultParentContainer(ContainerSummary resultParentContainer) {
    this.resultParentContainer = resultParentContainer;
    return this;
  }

   /**
   * Get resultParentContainer
   * @return resultParentContainer
  **/
  @javax.annotation.Nullable
  public ContainerSummary getResultParentContainer() {
    return resultParentContainer;
  }

  public void setResultParentContainer(ContainerSummary resultParentContainer) {
    this.resultParentContainer = resultParentContainer;
  }


  public SearchResult resultGlobalContainer(ContainerSummary resultGlobalContainer) {
    this.resultGlobalContainer = resultGlobalContainer;
    return this;
  }

   /**
   * Get resultGlobalContainer
   * @return resultGlobalContainer
  **/
  @javax.annotation.Nullable
  public ContainerSummary getResultGlobalContainer() {
    return resultGlobalContainer;
  }

  public void setResultGlobalContainer(ContainerSummary resultGlobalContainer) {
    this.resultGlobalContainer = resultGlobalContainer;
  }


  public SearchResult breadcrumbs(List<Breadcrumb> breadcrumbs) {
    this.breadcrumbs = breadcrumbs;
    return this;
  }

  public SearchResult addBreadcrumbsItem(Breadcrumb breadcrumbsItem) {
    if (this.breadcrumbs == null) {
      this.breadcrumbs = new ArrayList<>();
    }
    this.breadcrumbs.add(breadcrumbsItem);
    return this;
  }

   /**
   * Get breadcrumbs
   * @return breadcrumbs
  **/
  @javax.annotation.Nonnull
  public List<Breadcrumb> getBreadcrumbs() {
    return breadcrumbs;
  }

  public void setBreadcrumbs(List<Breadcrumb> breadcrumbs) {
    this.breadcrumbs = breadcrumbs;
  }


  public SearchResult entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nonnull
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public SearchResult iconCssClass(String iconCssClass) {
    this.iconCssClass = iconCssClass;
    return this;
  }

   /**
   * Get iconCssClass
   * @return iconCssClass
  **/
  @javax.annotation.Nonnull
  public String getIconCssClass() {
    return iconCssClass;
  }

  public void setIconCssClass(String iconCssClass) {
    this.iconCssClass = iconCssClass;
  }


  public SearchResult lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public SearchResult friendlyLastModified(String friendlyLastModified) {
    this.friendlyLastModified = friendlyLastModified;
    return this;
  }

   /**
   * Get friendlyLastModified
   * @return friendlyLastModified
  **/
  @javax.annotation.Nullable
  public String getFriendlyLastModified() {
    return friendlyLastModified;
  }

  public void setFriendlyLastModified(String friendlyLastModified) {
    this.friendlyLastModified = friendlyLastModified;
  }


  public SearchResult score(BigDecimal score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResult searchResult = (SearchResult) o;
    return Objects.equals(this.content, searchResult.content) &&
        Objects.equals(this.user, searchResult.user) &&
        Objects.equals(this.space, searchResult.space) &&
        Objects.equals(this.title, searchResult.title) &&
        Objects.equals(this.excerpt, searchResult.excerpt) &&
        Objects.equals(this.url, searchResult.url) &&
        Objects.equals(this.resultParentContainer, searchResult.resultParentContainer) &&
        Objects.equals(this.resultGlobalContainer, searchResult.resultGlobalContainer) &&
        Objects.equals(this.breadcrumbs, searchResult.breadcrumbs) &&
        Objects.equals(this.entityType, searchResult.entityType) &&
        Objects.equals(this.iconCssClass, searchResult.iconCssClass) &&
        Objects.equals(this.lastModified, searchResult.lastModified) &&
        Objects.equals(this.friendlyLastModified, searchResult.friendlyLastModified) &&
        Objects.equals(this.score, searchResult.score);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, user, space, title, excerpt, url, resultParentContainer, resultGlobalContainer, breadcrumbs, entityType, iconCssClass, lastModified, friendlyLastModified, score);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResult {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    excerpt: ").append(toIndentedString(excerpt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    resultParentContainer: ").append(toIndentedString(resultParentContainer)).append("\n");
    sb.append("    resultGlobalContainer: ").append(toIndentedString(resultGlobalContainer)).append("\n");
    sb.append("    breadcrumbs: ").append(toIndentedString(breadcrumbs)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    iconCssClass: ").append(toIndentedString(iconCssClass)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    friendlyLastModified: ").append(toIndentedString(friendlyLastModified)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("user");
    openapiFields.add("space");
    openapiFields.add("title");
    openapiFields.add("excerpt");
    openapiFields.add("url");
    openapiFields.add("resultParentContainer");
    openapiFields.add("resultGlobalContainer");
    openapiFields.add("breadcrumbs");
    openapiFields.add("entityType");
    openapiFields.add("iconCssClass");
    openapiFields.add("lastModified");
    openapiFields.add("friendlyLastModified");
    openapiFields.add("score");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("excerpt");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("breadcrumbs");
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("iconCssClass");
    openapiRequiredFields.add("lastModified");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SearchResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResult is not found in the empty JSON string", SearchResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `space`
      if (jsonObj.get("space") != null && !jsonObj.get("space").isJsonNull()) {
        Space.validateJsonElement(jsonObj.get("space"));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("excerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excerpt").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `resultParentContainer`
      if (jsonObj.get("resultParentContainer") != null && !jsonObj.get("resultParentContainer").isJsonNull()) {
        ContainerSummary.validateJsonElement(jsonObj.get("resultParentContainer"));
      }
      // validate the optional field `resultGlobalContainer`
      if (jsonObj.get("resultGlobalContainer") != null && !jsonObj.get("resultGlobalContainer").isJsonNull()) {
        ContainerSummary.validateJsonElement(jsonObj.get("resultGlobalContainer"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("breadcrumbs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `breadcrumbs` to be an array in the JSON string but got `%s`", jsonObj.get("breadcrumbs").toString()));
      }

      JsonArray jsonArraybreadcrumbs = jsonObj.getAsJsonArray("breadcrumbs");
      // validate the required field `breadcrumbs` (array)
      for (int i = 0; i < jsonArraybreadcrumbs.size(); i++) {
        Breadcrumb.validateJsonElement(jsonArraybreadcrumbs.get(i));
      };
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if (!jsonObj.get("iconCssClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconCssClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconCssClass").toString()));
      }
      if ((jsonObj.get("friendlyLastModified") != null && !jsonObj.get("friendlyLastModified").isJsonNull()) && !jsonObj.get("friendlyLastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyLastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyLastModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResult>() {
           @Override
           public void write(JsonWriter out, SearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchResult
  * @throws IOException if the JSON string is invalid with respect to SearchResult
  */
  public static SearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResult.class);
  }

 /**
  * Convert an instance of SearchResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

