/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContentLookAndFeel;
import org.openapitools.client.model.GenericLinksValue;
import org.openapitools.client.model.HeaderLookAndFeel;
import org.openapitools.client.model.HorizontalHeaderLookAndFeel;
import org.openapitools.client.model.LookAndFeelHeadings;
import org.openapitools.client.model.MenusLookAndFeel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Look and feel settings returned after an update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class LookAndFeelWithLinks {
  public static final String SERIALIZED_NAME_HEADINGS = "headings";
  @SerializedName(SERIALIZED_NAME_HEADINGS)
  private LookAndFeelHeadings headings;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private LookAndFeelHeadings links;

  public static final String SERIALIZED_NAME_MENUS = "menus";
  @SerializedName(SERIALIZED_NAME_MENUS)
  private MenusLookAndFeel menus;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private HeaderLookAndFeel header;

  public static final String SERIALIZED_NAME_HORIZONTAL_HEADER = "horizontalHeader";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_HEADER)
  private HorizontalHeaderLookAndFeel horizontalHeader;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private ContentLookAndFeel content;

  public static final String SERIALIZED_NAME_BORDERS_AND_DIVIDERS = "bordersAndDividers";
  @SerializedName(SERIALIZED_NAME_BORDERS_AND_DIVIDERS)
  private LookAndFeelHeadings bordersAndDividers;

  public static final String SERIALIZED_NAME_SPACE_REFERENCE = "spaceReference";
  @SerializedName(SERIALIZED_NAME_SPACE_REFERENCE)
  private Object spaceReference;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, GenericLinksValue> links = new HashMap<>();

  public LookAndFeelWithLinks() {
  }

  public LookAndFeelWithLinks headings(LookAndFeelHeadings headings) {
    this.headings = headings;
    return this;
  }

   /**
   * Get headings
   * @return headings
  **/
  @javax.annotation.Nonnull
  public LookAndFeelHeadings getHeadings() {
    return headings;
  }

  public void setHeadings(LookAndFeelHeadings headings) {
    this.headings = headings;
  }


  public LookAndFeelWithLinks links(LookAndFeelHeadings links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nonnull
  public LookAndFeelHeadings getLinks() {
    return links;
  }

  public void setLinks(LookAndFeelHeadings links) {
    this.links = links;
  }


  public LookAndFeelWithLinks menus(MenusLookAndFeel menus) {
    this.menus = menus;
    return this;
  }

   /**
   * Get menus
   * @return menus
  **/
  @javax.annotation.Nonnull
  public MenusLookAndFeel getMenus() {
    return menus;
  }

  public void setMenus(MenusLookAndFeel menus) {
    this.menus = menus;
  }


  public LookAndFeelWithLinks header(HeaderLookAndFeel header) {
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public HeaderLookAndFeel getHeader() {
    return header;
  }

  public void setHeader(HeaderLookAndFeel header) {
    this.header = header;
  }


  public LookAndFeelWithLinks horizontalHeader(HorizontalHeaderLookAndFeel horizontalHeader) {
    this.horizontalHeader = horizontalHeader;
    return this;
  }

   /**
   * Get horizontalHeader
   * @return horizontalHeader
  **/
  @javax.annotation.Nullable
  public HorizontalHeaderLookAndFeel getHorizontalHeader() {
    return horizontalHeader;
  }

  public void setHorizontalHeader(HorizontalHeaderLookAndFeel horizontalHeader) {
    this.horizontalHeader = horizontalHeader;
  }


  public LookAndFeelWithLinks content(ContentLookAndFeel content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nonnull
  public ContentLookAndFeel getContent() {
    return content;
  }

  public void setContent(ContentLookAndFeel content) {
    this.content = content;
  }


  public LookAndFeelWithLinks bordersAndDividers(LookAndFeelHeadings bordersAndDividers) {
    this.bordersAndDividers = bordersAndDividers;
    return this;
  }

   /**
   * Get bordersAndDividers
   * @return bordersAndDividers
  **/
  @javax.annotation.Nonnull
  public LookAndFeelHeadings getBordersAndDividers() {
    return bordersAndDividers;
  }

  public void setBordersAndDividers(LookAndFeelHeadings bordersAndDividers) {
    this.bordersAndDividers = bordersAndDividers;
  }


  public LookAndFeelWithLinks spaceReference(Object spaceReference) {
    this.spaceReference = spaceReference;
    return this;
  }

   /**
   * Get spaceReference
   * @return spaceReference
  **/
  @javax.annotation.Nullable
  public Object getSpaceReference() {
    return spaceReference;
  }

  public void setSpaceReference(Object spaceReference) {
    this.spaceReference = spaceReference;
  }


  public LookAndFeelWithLinks links(Map<String, GenericLinksValue> links) {
    this.links = links;
    return this;
  }

  public LookAndFeelWithLinks putLinksItem(String key, GenericLinksValue linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public Map<String, GenericLinksValue> getLinks() {
    return links;
  }

  public void setLinks(Map<String, GenericLinksValue> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookAndFeelWithLinks lookAndFeelWithLinks = (LookAndFeelWithLinks) o;
    return Objects.equals(this.headings, lookAndFeelWithLinks.headings) &&
        Objects.equals(this.links, lookAndFeelWithLinks.links) &&
        Objects.equals(this.menus, lookAndFeelWithLinks.menus) &&
        Objects.equals(this.header, lookAndFeelWithLinks.header) &&
        Objects.equals(this.horizontalHeader, lookAndFeelWithLinks.horizontalHeader) &&
        Objects.equals(this.content, lookAndFeelWithLinks.content) &&
        Objects.equals(this.bordersAndDividers, lookAndFeelWithLinks.bordersAndDividers) &&
        Objects.equals(this.spaceReference, lookAndFeelWithLinks.spaceReference) &&
        Objects.equals(this.links, lookAndFeelWithLinks.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(headings, links, menus, header, horizontalHeader, content, bordersAndDividers, spaceReference, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookAndFeelWithLinks {\n");
    sb.append("    headings: ").append(toIndentedString(headings)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    menus: ").append(toIndentedString(menus)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    horizontalHeader: ").append(toIndentedString(horizontalHeader)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    bordersAndDividers: ").append(toIndentedString(bordersAndDividers)).append("\n");
    sb.append("    spaceReference: ").append(toIndentedString(spaceReference)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("headings");
    openapiFields.add("links");
    openapiFields.add("menus");
    openapiFields.add("header");
    openapiFields.add("horizontalHeader");
    openapiFields.add("content");
    openapiFields.add("bordersAndDividers");
    openapiFields.add("spaceReference");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("headings");
    openapiRequiredFields.add("links");
    openapiRequiredFields.add("menus");
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("bordersAndDividers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LookAndFeelWithLinks
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LookAndFeelWithLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookAndFeelWithLinks is not found in the empty JSON string", LookAndFeelWithLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LookAndFeelWithLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookAndFeelWithLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LookAndFeelWithLinks.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `headings`
      LookAndFeelHeadings.validateJsonElement(jsonObj.get("headings"));
      // validate the required field `links`
      LookAndFeelHeadings.validateJsonElement(jsonObj.get("links"));
      // validate the required field `menus`
      MenusLookAndFeel.validateJsonElement(jsonObj.get("menus"));
      // validate the required field `header`
      HeaderLookAndFeel.validateJsonElement(jsonObj.get("header"));
      // validate the optional field `horizontalHeader`
      if (jsonObj.get("horizontalHeader") != null && !jsonObj.get("horizontalHeader").isJsonNull()) {
        HorizontalHeaderLookAndFeel.validateJsonElement(jsonObj.get("horizontalHeader"));
      }
      // validate the required field `content`
      ContentLookAndFeel.validateJsonElement(jsonObj.get("content"));
      // validate the required field `bordersAndDividers`
      LookAndFeelHeadings.validateJsonElement(jsonObj.get("bordersAndDividers"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookAndFeelWithLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookAndFeelWithLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookAndFeelWithLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookAndFeelWithLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<LookAndFeelWithLinks>() {
           @Override
           public void write(JsonWriter out, LookAndFeelWithLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookAndFeelWithLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LookAndFeelWithLinks given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LookAndFeelWithLinks
  * @throws IOException if the JSON string is invalid with respect to LookAndFeelWithLinks
  */
  public static LookAndFeelWithLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookAndFeelWithLinks.class);
  }

 /**
  * Convert an instance of LookAndFeelWithLinks to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

