/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContentBodyCreate;
import org.openapitools.client.model.ContentBodyCreateStorage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The updated body of the content. Does not apply to attachments. If you are not sure how to generate these formats, you can create a page in the Confluence application, retrieve the content using [Get content](#api-content-get), and expand the desired content format, e.g. &#x60;expand&#x3D;body.storage&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class ContentUpdateBody {
  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private ContentBodyCreate view;

  public static final String SERIALIZED_NAME_EXPORT_VIEW = "export_view";
  @SerializedName(SERIALIZED_NAME_EXPORT_VIEW)
  private ContentBodyCreate exportView;

  public static final String SERIALIZED_NAME_STYLED_VIEW = "styled_view";
  @SerializedName(SERIALIZED_NAME_STYLED_VIEW)
  private ContentBodyCreate styledView;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private ContentBodyCreateStorage storage;

  public static final String SERIALIZED_NAME_EDITOR = "editor";
  @SerializedName(SERIALIZED_NAME_EDITOR)
  private ContentBodyCreate editor;

  public static final String SERIALIZED_NAME_EDITOR2 = "editor2";
  @SerializedName(SERIALIZED_NAME_EDITOR2)
  private ContentBodyCreate editor2;

  public static final String SERIALIZED_NAME_WIKI = "wiki";
  @SerializedName(SERIALIZED_NAME_WIKI)
  private ContentBodyCreate wiki;

  public static final String SERIALIZED_NAME_ATLAS_DOC_FORMAT = "atlas_doc_format";
  @SerializedName(SERIALIZED_NAME_ATLAS_DOC_FORMAT)
  private ContentBodyCreate atlasDocFormat;

  public static final String SERIALIZED_NAME_ANONYMOUS_EXPORT_VIEW = "anonymous_export_view";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_EXPORT_VIEW)
  private ContentBodyCreate anonymousExportView;

  public ContentUpdateBody() {
  }

  public ContentUpdateBody view(ContentBodyCreate view) {
    this.view = view;
    return this;
  }

   /**
   * Get view
   * @return view
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getView() {
    return view;
  }

  public void setView(ContentBodyCreate view) {
    this.view = view;
  }


  public ContentUpdateBody exportView(ContentBodyCreate exportView) {
    this.exportView = exportView;
    return this;
  }

   /**
   * Get exportView
   * @return exportView
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getExportView() {
    return exportView;
  }

  public void setExportView(ContentBodyCreate exportView) {
    this.exportView = exportView;
  }


  public ContentUpdateBody styledView(ContentBodyCreate styledView) {
    this.styledView = styledView;
    return this;
  }

   /**
   * Get styledView
   * @return styledView
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getStyledView() {
    return styledView;
  }

  public void setStyledView(ContentBodyCreate styledView) {
    this.styledView = styledView;
  }


  public ContentUpdateBody storage(ContentBodyCreateStorage storage) {
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @javax.annotation.Nullable
  public ContentBodyCreateStorage getStorage() {
    return storage;
  }

  public void setStorage(ContentBodyCreateStorage storage) {
    this.storage = storage;
  }


  public ContentUpdateBody editor(ContentBodyCreate editor) {
    this.editor = editor;
    return this;
  }

   /**
   * Get editor
   * @return editor
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getEditor() {
    return editor;
  }

  public void setEditor(ContentBodyCreate editor) {
    this.editor = editor;
  }


  public ContentUpdateBody editor2(ContentBodyCreate editor2) {
    this.editor2 = editor2;
    return this;
  }

   /**
   * Get editor2
   * @return editor2
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getEditor2() {
    return editor2;
  }

  public void setEditor2(ContentBodyCreate editor2) {
    this.editor2 = editor2;
  }


  public ContentUpdateBody wiki(ContentBodyCreate wiki) {
    this.wiki = wiki;
    return this;
  }

   /**
   * Get wiki
   * @return wiki
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getWiki() {
    return wiki;
  }

  public void setWiki(ContentBodyCreate wiki) {
    this.wiki = wiki;
  }


  public ContentUpdateBody atlasDocFormat(ContentBodyCreate atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
    return this;
  }

   /**
   * Get atlasDocFormat
   * @return atlasDocFormat
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getAtlasDocFormat() {
    return atlasDocFormat;
  }

  public void setAtlasDocFormat(ContentBodyCreate atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
  }


  public ContentUpdateBody anonymousExportView(ContentBodyCreate anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
    return this;
  }

   /**
   * Get anonymousExportView
   * @return anonymousExportView
  **/
  @javax.annotation.Nullable
  public ContentBodyCreate getAnonymousExportView() {
    return anonymousExportView;
  }

  public void setAnonymousExportView(ContentBodyCreate anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentUpdateBody contentUpdateBody = (ContentUpdateBody) o;
    return Objects.equals(this.view, contentUpdateBody.view) &&
        Objects.equals(this.exportView, contentUpdateBody.exportView) &&
        Objects.equals(this.styledView, contentUpdateBody.styledView) &&
        Objects.equals(this.storage, contentUpdateBody.storage) &&
        Objects.equals(this.editor, contentUpdateBody.editor) &&
        Objects.equals(this.editor2, contentUpdateBody.editor2) &&
        Objects.equals(this.wiki, contentUpdateBody.wiki) &&
        Objects.equals(this.atlasDocFormat, contentUpdateBody.atlasDocFormat) &&
        Objects.equals(this.anonymousExportView, contentUpdateBody.anonymousExportView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(view, exportView, styledView, storage, editor, editor2, wiki, atlasDocFormat, anonymousExportView);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentUpdateBody {\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    exportView: ").append(toIndentedString(exportView)).append("\n");
    sb.append("    styledView: ").append(toIndentedString(styledView)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    editor2: ").append(toIndentedString(editor2)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("    atlasDocFormat: ").append(toIndentedString(atlasDocFormat)).append("\n");
    sb.append("    anonymousExportView: ").append(toIndentedString(anonymousExportView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("view");
    openapiFields.add("export_view");
    openapiFields.add("styled_view");
    openapiFields.add("storage");
    openapiFields.add("editor");
    openapiFields.add("editor2");
    openapiFields.add("wiki");
    openapiFields.add("atlas_doc_format");
    openapiFields.add("anonymous_export_view");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentUpdateBody
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentUpdateBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentUpdateBody is not found in the empty JSON string", ContentUpdateBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentUpdateBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentUpdateBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentUpdateBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentUpdateBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentUpdateBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentUpdateBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentUpdateBody>() {
           @Override
           public void write(JsonWriter out, ContentUpdateBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentUpdateBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentUpdateBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentUpdateBody
  * @throws IOException if the JSON string is invalid with respect to ContentUpdateBody
  */
  public static ContentUpdateBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentUpdateBody.class);
  }

 /**
  * Convert an instance of ContentUpdateBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

