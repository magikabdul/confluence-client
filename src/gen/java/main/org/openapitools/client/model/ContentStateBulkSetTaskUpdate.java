/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentState;
import org.openapitools.client.model.ContentStateFailure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentStateBulkSetTaskUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class ContentStateBulkSetTaskUpdate {
  public static final String SERIALIZED_NAME_SET = "set";
  @SerializedName(SERIALIZED_NAME_SET)
  private List<String> set = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private List<ContentStateFailure> failed = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Long percentage;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ContentState state;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public ContentStateBulkSetTaskUpdate() {
  }

  public ContentStateBulkSetTaskUpdate set(List<String> set) {
    this.set = set;
    return this;
  }

  public ContentStateBulkSetTaskUpdate addSetItem(String setItem) {
    if (this.set == null) {
      this.set = new ArrayList<>();
    }
    this.set.add(setItem);
    return this;
  }

   /**
   * Get set
   * @return set
  **/
  @javax.annotation.Nonnull
  public List<String> getSet() {
    return set;
  }

  public void setSet(List<String> set) {
    this.set = set;
  }


  public ContentStateBulkSetTaskUpdate failed(List<ContentStateFailure> failed) {
    this.failed = failed;
    return this;
  }

  public ContentStateBulkSetTaskUpdate addFailedItem(ContentStateFailure failedItem) {
    if (this.failed == null) {
      this.failed = new ArrayList<>();
    }
    this.failed.add(failedItem);
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @javax.annotation.Nonnull
  public List<ContentStateFailure> getFailed() {
    return failed;
  }

  public void setFailed(List<ContentStateFailure> failed) {
    this.failed = failed;
  }


  public ContentStateBulkSetTaskUpdate percentage(Long percentage) {
    this.percentage = percentage;
    return this;
  }

   /**
   * Get percentage
   * @return percentage
  **/
  @javax.annotation.Nonnull
  public Long getPercentage() {
    return percentage;
  }

  public void setPercentage(Long percentage) {
    this.percentage = percentage;
  }


  public ContentStateBulkSetTaskUpdate message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ContentStateBulkSetTaskUpdate state(ContentState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public ContentState getState() {
    return state;
  }

  public void setState(ContentState state) {
    this.state = state;
  }


  public ContentStateBulkSetTaskUpdate success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nonnull
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentStateBulkSetTaskUpdate contentStateBulkSetTaskUpdate = (ContentStateBulkSetTaskUpdate) o;
    return Objects.equals(this.set, contentStateBulkSetTaskUpdate.set) &&
        Objects.equals(this.failed, contentStateBulkSetTaskUpdate.failed) &&
        Objects.equals(this.percentage, contentStateBulkSetTaskUpdate.percentage) &&
        Objects.equals(this.message, contentStateBulkSetTaskUpdate.message) &&
        Objects.equals(this.state, contentStateBulkSetTaskUpdate.state) &&
        Objects.equals(this.success, contentStateBulkSetTaskUpdate.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(set, failed, percentage, message, state, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentStateBulkSetTaskUpdate {\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("set");
    openapiFields.add("failed");
    openapiFields.add("percentage");
    openapiFields.add("message");
    openapiFields.add("state");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("set");
    openapiRequiredFields.add("failed");
    openapiRequiredFields.add("percentage");
    openapiRequiredFields.add("success");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentStateBulkSetTaskUpdate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentStateBulkSetTaskUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentStateBulkSetTaskUpdate is not found in the empty JSON string", ContentStateBulkSetTaskUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentStateBulkSetTaskUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentStateBulkSetTaskUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentStateBulkSetTaskUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("set") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `set` to be an array in the JSON string but got `%s`", jsonObj.get("set").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("failed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failed` to be an array in the JSON string but got `%s`", jsonObj.get("failed").toString()));
      }

      JsonArray jsonArrayfailed = jsonObj.getAsJsonArray("failed");
      // validate the required field `failed` (array)
      for (int i = 0; i < jsonArrayfailed.size(); i++) {
        ContentStateFailure.validateJsonElement(jsonArrayfailed.get(i));
      };
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        ContentState.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentStateBulkSetTaskUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentStateBulkSetTaskUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentStateBulkSetTaskUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentStateBulkSetTaskUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentStateBulkSetTaskUpdate>() {
           @Override
           public void write(JsonWriter out, ContentStateBulkSetTaskUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentStateBulkSetTaskUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentStateBulkSetTaskUpdate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentStateBulkSetTaskUpdate
  * @throws IOException if the JSON string is invalid with respect to ContentStateBulkSetTaskUpdate
  */
  public static ContentStateBulkSetTaskUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentStateBulkSetTaskUpdate.class);
  }

 /**
  * Convert an instance of ContentStateBulkSetTaskUpdate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

