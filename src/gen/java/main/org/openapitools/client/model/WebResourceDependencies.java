/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SuperBatchWebResources;
import org.openapitools.client.model.WebResourceDependenciesExpandable;
import org.openapitools.client.model.WebResourceDependenciesTags;
import org.openapitools.client.model.WebResourceDependenciesUris;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebResourceDependencies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class WebResourceDependencies {
  public static final String SERIALIZED_NAME_EXPANDABLE = "_expandable";
  @SerializedName(SERIALIZED_NAME_EXPANDABLE)
  private WebResourceDependenciesExpandable expandable;

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List<String> keys;

  public static final String SERIALIZED_NAME_CONTEXTS = "contexts";
  @SerializedName(SERIALIZED_NAME_CONTEXTS)
  private List<String> contexts;

  public static final String SERIALIZED_NAME_URIS = "uris";
  @SerializedName(SERIALIZED_NAME_URIS)
  private WebResourceDependenciesUris uris;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private WebResourceDependenciesTags tags;

  public static final String SERIALIZED_NAME_SUPERBATCH = "superbatch";
  @SerializedName(SERIALIZED_NAME_SUPERBATCH)
  private SuperBatchWebResources superbatch;

  public WebResourceDependencies() {
  }

  public WebResourceDependencies expandable(WebResourceDependenciesExpandable expandable) {
    this.expandable = expandable;
    return this;
  }

   /**
   * Get expandable
   * @return expandable
  **/
  @javax.annotation.Nullable
  public WebResourceDependenciesExpandable getExpandable() {
    return expandable;
  }

  public void setExpandable(WebResourceDependenciesExpandable expandable) {
    this.expandable = expandable;
  }


  public WebResourceDependencies keys(List<String> keys) {
    this.keys = keys;
    return this;
  }

  public WebResourceDependencies addKeysItem(String keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

   /**
   * Get keys
   * @return keys
  **/
  @javax.annotation.Nullable
  public List<String> getKeys() {
    return keys;
  }

  public void setKeys(List<String> keys) {
    this.keys = keys;
  }


  public WebResourceDependencies contexts(List<String> contexts) {
    this.contexts = contexts;
    return this;
  }

  public WebResourceDependencies addContextsItem(String contextsItem) {
    if (this.contexts == null) {
      this.contexts = new ArrayList<>();
    }
    this.contexts.add(contextsItem);
    return this;
  }

   /**
   * Get contexts
   * @return contexts
  **/
  @javax.annotation.Nullable
  public List<String> getContexts() {
    return contexts;
  }

  public void setContexts(List<String> contexts) {
    this.contexts = contexts;
  }


  public WebResourceDependencies uris(WebResourceDependenciesUris uris) {
    this.uris = uris;
    return this;
  }

   /**
   * Get uris
   * @return uris
  **/
  @javax.annotation.Nullable
  public WebResourceDependenciesUris getUris() {
    return uris;
  }

  public void setUris(WebResourceDependenciesUris uris) {
    this.uris = uris;
  }


  public WebResourceDependencies tags(WebResourceDependenciesTags tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public WebResourceDependenciesTags getTags() {
    return tags;
  }

  public void setTags(WebResourceDependenciesTags tags) {
    this.tags = tags;
  }


  public WebResourceDependencies superbatch(SuperBatchWebResources superbatch) {
    this.superbatch = superbatch;
    return this;
  }

   /**
   * Get superbatch
   * @return superbatch
  **/
  @javax.annotation.Nullable
  public SuperBatchWebResources getSuperbatch() {
    return superbatch;
  }

  public void setSuperbatch(SuperBatchWebResources superbatch) {
    this.superbatch = superbatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebResourceDependencies webResourceDependencies = (WebResourceDependencies) o;
    return Objects.equals(this.expandable, webResourceDependencies.expandable) &&
        Objects.equals(this.keys, webResourceDependencies.keys) &&
        Objects.equals(this.contexts, webResourceDependencies.contexts) &&
        Objects.equals(this.uris, webResourceDependencies.uris) &&
        Objects.equals(this.tags, webResourceDependencies.tags) &&
        Objects.equals(this.superbatch, webResourceDependencies.superbatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expandable, keys, contexts, uris, tags, superbatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebResourceDependencies {\n");
    sb.append("    expandable: ").append(toIndentedString(expandable)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    contexts: ").append(toIndentedString(contexts)).append("\n");
    sb.append("    uris: ").append(toIndentedString(uris)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    superbatch: ").append(toIndentedString(superbatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_expandable");
    openapiFields.add("keys");
    openapiFields.add("contexts");
    openapiFields.add("uris");
    openapiFields.add("tags");
    openapiFields.add("superbatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WebResourceDependencies
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebResourceDependencies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebResourceDependencies is not found in the empty JSON string", WebResourceDependencies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebResourceDependencies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebResourceDependencies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("keys") != null && !jsonObj.get("keys").isJsonNull() && !jsonObj.get("keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys` to be an array in the JSON string but got `%s`", jsonObj.get("keys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contexts") != null && !jsonObj.get("contexts").isJsonNull() && !jsonObj.get("contexts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contexts` to be an array in the JSON string but got `%s`", jsonObj.get("contexts").toString()));
      }
      // validate the optional field `uris`
      if (jsonObj.get("uris") != null && !jsonObj.get("uris").isJsonNull()) {
        WebResourceDependenciesUris.validateJsonElement(jsonObj.get("uris"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        WebResourceDependenciesTags.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `superbatch`
      if (jsonObj.get("superbatch") != null && !jsonObj.get("superbatch").isJsonNull()) {
        SuperBatchWebResources.validateJsonElement(jsonObj.get("superbatch"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebResourceDependencies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebResourceDependencies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebResourceDependencies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebResourceDependencies.class));

       return (TypeAdapter<T>) new TypeAdapter<WebResourceDependencies>() {
           @Override
           public void write(JsonWriter out, WebResourceDependencies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebResourceDependencies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebResourceDependencies given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebResourceDependencies
  * @throws IOException if the JSON string is invalid with respect to WebResourceDependencies
  */
  public static WebResourceDependencies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebResourceDependencies.class);
  }

 /**
  * Convert an instance of WebResourceDependencies to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

