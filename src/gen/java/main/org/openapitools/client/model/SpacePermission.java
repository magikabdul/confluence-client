/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OperationCheckResult;
import org.openapitools.client.model.SpacePermissionSubjects;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object represents a permission for given space. Permissions consist of at least one operation object with an accompanying subjects object.  The following combinations of &#x60;operation&#x60; and &#x60;targetType&#x60; values are valid for the &#x60;operation&#x60; object:    - &#39;create&#39;: &#39;page&#39;, &#39;blogpost&#39;, &#39;comment&#39;, &#39;attachment&#39;   - &#39;read&#39;: &#39;space&#39;   - &#39;delete&#39;: &#39;page&#39;, &#39;blogpost&#39;, &#39;comment&#39;, &#39;attachment&#39;   - &#39;export&#39;: &#39;space&#39;   - &#39;administer&#39;: &#39;space&#39;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class SpacePermission {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private SpacePermissionSubjects subjects;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationCheckResult operation;

  public static final String SERIALIZED_NAME_ANONYMOUS_ACCESS = "anonymousAccess";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_ACCESS)
  private Boolean anonymousAccess = false;

  public static final String SERIALIZED_NAME_UNLICENSED_ACCESS = "unlicensedAccess";
  @SerializedName(SERIALIZED_NAME_UNLICENSED_ACCESS)
  private Boolean unlicensedAccess = false;

  public SpacePermission() {
  }

  public SpacePermission id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public SpacePermission subjects(SpacePermissionSubjects subjects) {
    this.subjects = subjects;
    return this;
  }

   /**
   * Get subjects
   * @return subjects
  **/
  @javax.annotation.Nullable
  public SpacePermissionSubjects getSubjects() {
    return subjects;
  }

  public void setSubjects(SpacePermissionSubjects subjects) {
    this.subjects = subjects;
  }


  public SpacePermission operation(OperationCheckResult operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nonnull
  public OperationCheckResult getOperation() {
    return operation;
  }

  public void setOperation(OperationCheckResult operation) {
    this.operation = operation;
  }


  public SpacePermission anonymousAccess(Boolean anonymousAccess) {
    this.anonymousAccess = anonymousAccess;
    return this;
  }

   /**
   * Grant anonymous users permission to use the operation.
   * @return anonymousAccess
  **/
  @javax.annotation.Nonnull
  public Boolean getAnonymousAccess() {
    return anonymousAccess;
  }

  public void setAnonymousAccess(Boolean anonymousAccess) {
    this.anonymousAccess = anonymousAccess;
  }


  public SpacePermission unlicensedAccess(Boolean unlicensedAccess) {
    this.unlicensedAccess = unlicensedAccess;
    return this;
  }

   /**
   * Grants access to unlicensed users from JIRA Service Desk when used with the &#39;read space&#39; operation.
   * @return unlicensedAccess
  **/
  @javax.annotation.Nonnull
  public Boolean getUnlicensedAccess() {
    return unlicensedAccess;
  }

  public void setUnlicensedAccess(Boolean unlicensedAccess) {
    this.unlicensedAccess = unlicensedAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpacePermission spacePermission = (SpacePermission) o;
    return Objects.equals(this.id, spacePermission.id) &&
        Objects.equals(this.subjects, spacePermission.subjects) &&
        Objects.equals(this.operation, spacePermission.operation) &&
        Objects.equals(this.anonymousAccess, spacePermission.anonymousAccess) &&
        Objects.equals(this.unlicensedAccess, spacePermission.unlicensedAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, subjects, operation, anonymousAccess, unlicensedAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpacePermission {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    anonymousAccess: ").append(toIndentedString(anonymousAccess)).append("\n");
    sb.append("    unlicensedAccess: ").append(toIndentedString(unlicensedAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("subjects");
    openapiFields.add("operation");
    openapiFields.add("anonymousAccess");
    openapiFields.add("unlicensedAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operation");
    openapiRequiredFields.add("anonymousAccess");
    openapiRequiredFields.add("unlicensedAccess");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SpacePermission
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpacePermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpacePermission is not found in the empty JSON string", SpacePermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpacePermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpacePermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SpacePermission.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `subjects`
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull()) {
        SpacePermissionSubjects.validateJsonElement(jsonObj.get("subjects"));
      }
      // validate the required field `operation`
      OperationCheckResult.validateJsonElement(jsonObj.get("operation"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpacePermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpacePermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpacePermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpacePermission.class));

       return (TypeAdapter<T>) new TypeAdapter<SpacePermission>() {
           @Override
           public void write(JsonWriter out, SpacePermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpacePermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SpacePermission given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SpacePermission
  * @throws IOException if the JSON string is invalid with respect to SpacePermission
  */
  public static SpacePermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpacePermission.class);
  }

 /**
  * Convert an instance of SpacePermission to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

