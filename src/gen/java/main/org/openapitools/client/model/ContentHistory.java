/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContentHistoryContributors;
import org.openapitools.client.model.ContentHistoryExpandable;
import org.openapitools.client.model.GenericLinksValue;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Version;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T01:00:55.766609049+02:00[Europe/Warsaw]")
public class ContentHistory {
  public static final String SERIALIZED_NAME_LATEST = "latest";
  @SerializedName(SERIALIZED_NAME_LATEST)
  private Boolean latest;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private User createdBy;

  public static final String SERIALIZED_NAME_OWNED_BY = "ownedBy";
  @SerializedName(SERIALIZED_NAME_OWNED_BY)
  private User ownedBy;

  public static final String SERIALIZED_NAME_LAST_OWNED_BY = "lastOwnedBy";
  @SerializedName(SERIALIZED_NAME_LAST_OWNED_BY)
  private User lastOwnedBy;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private Version lastUpdated;

  public static final String SERIALIZED_NAME_PREVIOUS_VERSION = "previousVersion";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VERSION)
  private Version previousVersion;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private ContentHistoryContributors contributors;

  public static final String SERIALIZED_NAME_NEXT_VERSION = "nextVersion";
  @SerializedName(SERIALIZED_NAME_NEXT_VERSION)
  private Version nextVersion;

  public static final String SERIALIZED_NAME_EXPANDABLE = "_expandable";
  @SerializedName(SERIALIZED_NAME_EXPANDABLE)
  private ContentHistoryExpandable expandable;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, GenericLinksValue> links = new HashMap<>();

  public ContentHistory() {
  }

  public ContentHistory latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

   /**
   * Get latest
   * @return latest
  **/
  @javax.annotation.Nonnull
  public Boolean getLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }


  public ContentHistory createdBy(User createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public User getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(User createdBy) {
    this.createdBy = createdBy;
  }


  public ContentHistory ownedBy(User ownedBy) {
    this.ownedBy = ownedBy;
    return this;
  }

   /**
   * Get ownedBy
   * @return ownedBy
  **/
  @javax.annotation.Nullable
  public User getOwnedBy() {
    return ownedBy;
  }

  public void setOwnedBy(User ownedBy) {
    this.ownedBy = ownedBy;
  }


  public ContentHistory lastOwnedBy(User lastOwnedBy) {
    this.lastOwnedBy = lastOwnedBy;
    return this;
  }

   /**
   * Get lastOwnedBy
   * @return lastOwnedBy
  **/
  @javax.annotation.Nullable
  public User getLastOwnedBy() {
    return lastOwnedBy;
  }

  public void setLastOwnedBy(User lastOwnedBy) {
    this.lastOwnedBy = lastOwnedBy;
  }


  public ContentHistory createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public ContentHistory lastUpdated(Version lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public Version getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(Version lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ContentHistory previousVersion(Version previousVersion) {
    this.previousVersion = previousVersion;
    return this;
  }

   /**
   * Get previousVersion
   * @return previousVersion
  **/
  @javax.annotation.Nullable
  public Version getPreviousVersion() {
    return previousVersion;
  }

  public void setPreviousVersion(Version previousVersion) {
    this.previousVersion = previousVersion;
  }


  public ContentHistory contributors(ContentHistoryContributors contributors) {
    this.contributors = contributors;
    return this;
  }

   /**
   * Get contributors
   * @return contributors
  **/
  @javax.annotation.Nullable
  public ContentHistoryContributors getContributors() {
    return contributors;
  }

  public void setContributors(ContentHistoryContributors contributors) {
    this.contributors = contributors;
  }


  public ContentHistory nextVersion(Version nextVersion) {
    this.nextVersion = nextVersion;
    return this;
  }

   /**
   * Get nextVersion
   * @return nextVersion
  **/
  @javax.annotation.Nullable
  public Version getNextVersion() {
    return nextVersion;
  }

  public void setNextVersion(Version nextVersion) {
    this.nextVersion = nextVersion;
  }


  public ContentHistory expandable(ContentHistoryExpandable expandable) {
    this.expandable = expandable;
    return this;
  }

   /**
   * Get expandable
   * @return expandable
  **/
  @javax.annotation.Nullable
  public ContentHistoryExpandable getExpandable() {
    return expandable;
  }

  public void setExpandable(ContentHistoryExpandable expandable) {
    this.expandable = expandable;
  }


  public ContentHistory links(Map<String, GenericLinksValue> links) {
    this.links = links;
    return this;
  }

  public ContentHistory putLinksItem(String key, GenericLinksValue linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public Map<String, GenericLinksValue> getLinks() {
    return links;
  }

  public void setLinks(Map<String, GenericLinksValue> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentHistory contentHistory = (ContentHistory) o;
    return Objects.equals(this.latest, contentHistory.latest) &&
        Objects.equals(this.createdBy, contentHistory.createdBy) &&
        Objects.equals(this.ownedBy, contentHistory.ownedBy) &&
        Objects.equals(this.lastOwnedBy, contentHistory.lastOwnedBy) &&
        Objects.equals(this.createdDate, contentHistory.createdDate) &&
        Objects.equals(this.lastUpdated, contentHistory.lastUpdated) &&
        Objects.equals(this.previousVersion, contentHistory.previousVersion) &&
        Objects.equals(this.contributors, contentHistory.contributors) &&
        Objects.equals(this.nextVersion, contentHistory.nextVersion) &&
        Objects.equals(this.expandable, contentHistory.expandable) &&
        Objects.equals(this.links, contentHistory.links);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(latest, createdBy, ownedBy, lastOwnedBy, createdDate, lastUpdated, previousVersion, contributors, nextVersion, expandable, links);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentHistory {\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("    lastOwnedBy: ").append(toIndentedString(lastOwnedBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    previousVersion: ").append(toIndentedString(previousVersion)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("    nextVersion: ").append(toIndentedString(nextVersion)).append("\n");
    sb.append("    expandable: ").append(toIndentedString(expandable)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("latest");
    openapiFields.add("createdBy");
    openapiFields.add("ownedBy");
    openapiFields.add("lastOwnedBy");
    openapiFields.add("createdDate");
    openapiFields.add("lastUpdated");
    openapiFields.add("previousVersion");
    openapiFields.add("contributors");
    openapiFields.add("nextVersion");
    openapiFields.add("_expandable");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("latest");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentHistory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentHistory is not found in the empty JSON string", ContentHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentHistory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contributors`
      if (jsonObj.get("contributors") != null && !jsonObj.get("contributors").isJsonNull()) {
        ContentHistoryContributors.validateJsonElement(jsonObj.get("contributors"));
      }
      // validate the optional field `_expandable`
      if (jsonObj.get("_expandable") != null && !jsonObj.get("_expandable").isJsonNull()) {
        ContentHistoryExpandable.validateJsonElement(jsonObj.get("_expandable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentHistory>() {
           @Override
           public void write(JsonWriter out, ContentHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentHistory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentHistory
  * @throws IOException if the JSON string is invalid with respect to ContentHistory
  */
  public static ContentHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentHistory.class);
  }

 /**
  * Convert an instance of ContentHistory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

